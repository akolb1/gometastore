// Code generated by Thrift Compiler (0.15.0). DO NOT EDIT.

package main

import (
	"context"
	"flag"
	"fmt"
	thrift "github.com/apache/thrift/lib/go/thrift"
	"hive_metastore"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
)

var _ = hive_metastore.GoUnusedProtection__

func Usage() {
	fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
	flag.PrintDefaults()
	fmt.Fprintln(os.Stderr, "\nFunctions:")
	fmt.Fprintln(os.Stderr, "  string getMetaConf(string key)")
	fmt.Fprintln(os.Stderr, "  void setMetaConf(string key, string value)")
	fmt.Fprintln(os.Stderr, "  void create_database(Database database)")
	fmt.Fprintln(os.Stderr, "  Database get_database(string name)")
	fmt.Fprintln(os.Stderr, "  void drop_database(string name, bool deleteData, bool cascade)")
	fmt.Fprintln(os.Stderr, "   get_databases(string pattern)")
	fmt.Fprintln(os.Stderr, "   get_all_databases()")
	fmt.Fprintln(os.Stderr, "  void alter_database(string dbname, Database db)")
	fmt.Fprintln(os.Stderr, "  Type get_type(string name)")
	fmt.Fprintln(os.Stderr, "  bool create_type(Type type)")
	fmt.Fprintln(os.Stderr, "  bool drop_type(string type)")
	fmt.Fprintln(os.Stderr, "   get_type_all(string name)")
	fmt.Fprintln(os.Stderr, "   get_fields(string db_name, string table_name)")
	fmt.Fprintln(os.Stderr, "   get_fields_with_environment_context(string db_name, string table_name, EnvironmentContext environment_context)")
	fmt.Fprintln(os.Stderr, "   get_schema(string db_name, string table_name)")
	fmt.Fprintln(os.Stderr, "   get_schema_with_environment_context(string db_name, string table_name, EnvironmentContext environment_context)")
	fmt.Fprintln(os.Stderr, "  void create_table(Table tbl)")
	fmt.Fprintln(os.Stderr, "  void create_table_with_environment_context(Table tbl, EnvironmentContext environment_context)")
	fmt.Fprintln(os.Stderr, "  void create_table_with_constraints(Table tbl,  primaryKeys,  foreignKeys,  uniqueConstraints,  notNullConstraints)")
	fmt.Fprintln(os.Stderr, "  void drop_constraint(DropConstraintRequest req)")
	fmt.Fprintln(os.Stderr, "  void add_primary_key(AddPrimaryKeyRequest req)")
	fmt.Fprintln(os.Stderr, "  void add_foreign_key(AddForeignKeyRequest req)")
	fmt.Fprintln(os.Stderr, "  void add_unique_constraint(AddUniqueConstraintRequest req)")
	fmt.Fprintln(os.Stderr, "  void add_not_null_constraint(AddNotNullConstraintRequest req)")
	fmt.Fprintln(os.Stderr, "  void drop_table(string dbname, string name, bool deleteData)")
	fmt.Fprintln(os.Stderr, "  void drop_table_with_environment_context(string dbname, string name, bool deleteData, EnvironmentContext environment_context)")
	fmt.Fprintln(os.Stderr, "  void truncate_table(string dbName, string tableName,  partNames)")
	fmt.Fprintln(os.Stderr, "   get_tables(string db_name, string pattern)")
	fmt.Fprintln(os.Stderr, "   get_tables_by_type(string db_name, string pattern, string tableType)")
	fmt.Fprintln(os.Stderr, "   get_table_meta(string db_patterns, string tbl_patterns,  tbl_types)")
	fmt.Fprintln(os.Stderr, "   get_all_tables(string db_name)")
	fmt.Fprintln(os.Stderr, "  Table get_table(string dbname, string tbl_name)")
	fmt.Fprintln(os.Stderr, "   get_table_objects_by_name(string dbname,  tbl_names)")
	fmt.Fprintln(os.Stderr, "  GetTableResult get_table_req(GetTableRequest req)")
	fmt.Fprintln(os.Stderr, "  GetTablesResult get_table_objects_by_name_req(GetTablesRequest req)")
	fmt.Fprintln(os.Stderr, "   get_table_names_by_filter(string dbname, string filter, i16 max_tables)")
	fmt.Fprintln(os.Stderr, "  void alter_table(string dbname, string tbl_name, Table new_tbl)")
	fmt.Fprintln(os.Stderr, "  void alter_table_with_environment_context(string dbname, string tbl_name, Table new_tbl, EnvironmentContext environment_context)")
	fmt.Fprintln(os.Stderr, "  void alter_table_with_cascade(string dbname, string tbl_name, Table new_tbl, bool cascade)")
	fmt.Fprintln(os.Stderr, "  Partition add_partition(Partition new_part)")
	fmt.Fprintln(os.Stderr, "  Partition add_partition_with_environment_context(Partition new_part, EnvironmentContext environment_context)")
	fmt.Fprintln(os.Stderr, "  i32 add_partitions( new_parts)")
	fmt.Fprintln(os.Stderr, "  i32 add_partitions_pspec( new_parts)")
	fmt.Fprintln(os.Stderr, "  Partition append_partition(string db_name, string tbl_name,  part_vals)")
	fmt.Fprintln(os.Stderr, "  AddPartitionsResult add_partitions_req(AddPartitionsRequest request)")
	fmt.Fprintln(os.Stderr, "  Partition append_partition_with_environment_context(string db_name, string tbl_name,  part_vals, EnvironmentContext environment_context)")
	fmt.Fprintln(os.Stderr, "  Partition append_partition_by_name(string db_name, string tbl_name, string part_name)")
	fmt.Fprintln(os.Stderr, "  Partition append_partition_by_name_with_environment_context(string db_name, string tbl_name, string part_name, EnvironmentContext environment_context)")
	fmt.Fprintln(os.Stderr, "  bool drop_partition(string db_name, string tbl_name,  part_vals, bool deleteData)")
	fmt.Fprintln(os.Stderr, "  bool drop_partition_with_environment_context(string db_name, string tbl_name,  part_vals, bool deleteData, EnvironmentContext environment_context)")
	fmt.Fprintln(os.Stderr, "  bool drop_partition_by_name(string db_name, string tbl_name, string part_name, bool deleteData)")
	fmt.Fprintln(os.Stderr, "  bool drop_partition_by_name_with_environment_context(string db_name, string tbl_name, string part_name, bool deleteData, EnvironmentContext environment_context)")
	fmt.Fprintln(os.Stderr, "  DropPartitionsResult drop_partitions_req(DropPartitionsRequest req)")
	fmt.Fprintln(os.Stderr, "  Partition get_partition(string db_name, string tbl_name,  part_vals)")
	fmt.Fprintln(os.Stderr, "  Partition exchange_partition( partitionSpecs, string source_db, string source_table_name, string dest_db, string dest_table_name)")
	fmt.Fprintln(os.Stderr, "   exchange_partitions( partitionSpecs, string source_db, string source_table_name, string dest_db, string dest_table_name)")
	fmt.Fprintln(os.Stderr, "  Partition get_partition_with_auth(string db_name, string tbl_name,  part_vals, string user_name,  group_names)")
	fmt.Fprintln(os.Stderr, "  Partition get_partition_by_name(string db_name, string tbl_name, string part_name)")
	fmt.Fprintln(os.Stderr, "   get_partitions(string db_name, string tbl_name, i16 max_parts)")
	fmt.Fprintln(os.Stderr, "   get_partitions_with_auth(string db_name, string tbl_name, i16 max_parts, string user_name,  group_names)")
	fmt.Fprintln(os.Stderr, "   get_partitions_pspec(string db_name, string tbl_name, i32 max_parts)")
	fmt.Fprintln(os.Stderr, "   get_partition_names(string db_name, string tbl_name, i16 max_parts)")
	fmt.Fprintln(os.Stderr, "  PartitionValuesResponse get_partition_values(PartitionValuesRequest request)")
	fmt.Fprintln(os.Stderr, "   get_partitions_ps(string db_name, string tbl_name,  part_vals, i16 max_parts)")
	fmt.Fprintln(os.Stderr, "   get_partitions_ps_with_auth(string db_name, string tbl_name,  part_vals, i16 max_parts, string user_name,  group_names)")
	fmt.Fprintln(os.Stderr, "   get_partition_names_ps(string db_name, string tbl_name,  part_vals, i16 max_parts)")
	fmt.Fprintln(os.Stderr, "   get_partitions_by_filter(string db_name, string tbl_name, string filter, i16 max_parts)")
	fmt.Fprintln(os.Stderr, "   get_part_specs_by_filter(string db_name, string tbl_name, string filter, i32 max_parts)")
	fmt.Fprintln(os.Stderr, "  PartitionsByExprResult get_partitions_by_expr(PartitionsByExprRequest req)")
	fmt.Fprintln(os.Stderr, "  i32 get_num_partitions_by_filter(string db_name, string tbl_name, string filter)")
	fmt.Fprintln(os.Stderr, "   get_partitions_by_names(string db_name, string tbl_name,  names)")
	fmt.Fprintln(os.Stderr, "  void alter_partition(string db_name, string tbl_name, Partition new_part)")
	fmt.Fprintln(os.Stderr, "  void alter_partitions(string db_name, string tbl_name,  new_parts)")
	fmt.Fprintln(os.Stderr, "  void alter_partitions_with_environment_context(string db_name, string tbl_name,  new_parts, EnvironmentContext environment_context)")
	fmt.Fprintln(os.Stderr, "  void alter_partition_with_environment_context(string db_name, string tbl_name, Partition new_part, EnvironmentContext environment_context)")
	fmt.Fprintln(os.Stderr, "  void rename_partition(string db_name, string tbl_name,  part_vals, Partition new_part)")
	fmt.Fprintln(os.Stderr, "  bool partition_name_has_valid_characters( part_vals, bool throw_exception)")
	fmt.Fprintln(os.Stderr, "  string get_config_value(string name, string defaultValue)")
	fmt.Fprintln(os.Stderr, "   partition_name_to_vals(string part_name)")
	fmt.Fprintln(os.Stderr, "   partition_name_to_spec(string part_name)")
	fmt.Fprintln(os.Stderr, "  void markPartitionForEvent(string db_name, string tbl_name,  part_vals, PartitionEventType eventType)")
	fmt.Fprintln(os.Stderr, "  bool isPartitionMarkedForEvent(string db_name, string tbl_name,  part_vals, PartitionEventType eventType)")
	fmt.Fprintln(os.Stderr, "  Index add_index(Index new_index, Table index_table)")
	fmt.Fprintln(os.Stderr, "  void alter_index(string dbname, string base_tbl_name, string idx_name, Index new_idx)")
	fmt.Fprintln(os.Stderr, "  bool drop_index_by_name(string db_name, string tbl_name, string index_name, bool deleteData)")
	fmt.Fprintln(os.Stderr, "  Index get_index_by_name(string db_name, string tbl_name, string index_name)")
	fmt.Fprintln(os.Stderr, "   get_indexes(string db_name, string tbl_name, i16 max_indexes)")
	fmt.Fprintln(os.Stderr, "   get_index_names(string db_name, string tbl_name, i16 max_indexes)")
	fmt.Fprintln(os.Stderr, "  PrimaryKeysResponse get_primary_keys(PrimaryKeysRequest request)")
	fmt.Fprintln(os.Stderr, "  ForeignKeysResponse get_foreign_keys(ForeignKeysRequest request)")
	fmt.Fprintln(os.Stderr, "  UniqueConstraintsResponse get_unique_constraints(UniqueConstraintsRequest request)")
	fmt.Fprintln(os.Stderr, "  NotNullConstraintsResponse get_not_null_constraints(NotNullConstraintsRequest request)")
	fmt.Fprintln(os.Stderr, "  bool update_table_column_statistics(ColumnStatistics stats_obj)")
	fmt.Fprintln(os.Stderr, "  bool update_partition_column_statistics(ColumnStatistics stats_obj)")
	fmt.Fprintln(os.Stderr, "  ColumnStatistics get_table_column_statistics(string db_name, string tbl_name, string col_name)")
	fmt.Fprintln(os.Stderr, "  ColumnStatistics get_partition_column_statistics(string db_name, string tbl_name, string part_name, string col_name)")
	fmt.Fprintln(os.Stderr, "  TableStatsResult get_table_statistics_req(TableStatsRequest request)")
	fmt.Fprintln(os.Stderr, "  PartitionsStatsResult get_partitions_statistics_req(PartitionsStatsRequest request)")
	fmt.Fprintln(os.Stderr, "  AggrStats get_aggr_stats_for(PartitionsStatsRequest request)")
	fmt.Fprintln(os.Stderr, "  bool set_aggr_stats_for(SetPartitionsStatsRequest request)")
	fmt.Fprintln(os.Stderr, "  bool delete_partition_column_statistics(string db_name, string tbl_name, string part_name, string col_name)")
	fmt.Fprintln(os.Stderr, "  bool delete_table_column_statistics(string db_name, string tbl_name, string col_name)")
	fmt.Fprintln(os.Stderr, "  void create_function(Function func)")
	fmt.Fprintln(os.Stderr, "  void drop_function(string dbName, string funcName)")
	fmt.Fprintln(os.Stderr, "  void alter_function(string dbName, string funcName, Function newFunc)")
	fmt.Fprintln(os.Stderr, "   get_functions(string dbName, string pattern)")
	fmt.Fprintln(os.Stderr, "  Function get_function(string dbName, string funcName)")
	fmt.Fprintln(os.Stderr, "  GetAllFunctionsResponse get_all_functions()")
	fmt.Fprintln(os.Stderr, "  bool create_role(Role role)")
	fmt.Fprintln(os.Stderr, "  bool drop_role(string role_name)")
	fmt.Fprintln(os.Stderr, "   get_role_names()")
	fmt.Fprintln(os.Stderr, "  bool grant_role(string role_name, string principal_name, PrincipalType principal_type, string grantor, PrincipalType grantorType, bool grant_option)")
	fmt.Fprintln(os.Stderr, "  bool revoke_role(string role_name, string principal_name, PrincipalType principal_type)")
	fmt.Fprintln(os.Stderr, "   list_roles(string principal_name, PrincipalType principal_type)")
	fmt.Fprintln(os.Stderr, "  GrantRevokeRoleResponse grant_revoke_role(GrantRevokeRoleRequest request)")
	fmt.Fprintln(os.Stderr, "  GetPrincipalsInRoleResponse get_principals_in_role(GetPrincipalsInRoleRequest request)")
	fmt.Fprintln(os.Stderr, "  GetRoleGrantsForPrincipalResponse get_role_grants_for_principal(GetRoleGrantsForPrincipalRequest request)")
	fmt.Fprintln(os.Stderr, "  PrincipalPrivilegeSet get_privilege_set(HiveObjectRef hiveObject, string user_name,  group_names)")
	fmt.Fprintln(os.Stderr, "   list_privileges(string principal_name, PrincipalType principal_type, HiveObjectRef hiveObject)")
	fmt.Fprintln(os.Stderr, "  bool grant_privileges(PrivilegeBag privileges)")
	fmt.Fprintln(os.Stderr, "  bool revoke_privileges(PrivilegeBag privileges)")
	fmt.Fprintln(os.Stderr, "  GrantRevokePrivilegeResponse grant_revoke_privileges(GrantRevokePrivilegeRequest request)")
	fmt.Fprintln(os.Stderr, "   set_ugi(string user_name,  group_names)")
	fmt.Fprintln(os.Stderr, "  string get_delegation_token(string token_owner, string renewer_kerberos_principal_name)")
	fmt.Fprintln(os.Stderr, "  i64 renew_delegation_token(string token_str_form)")
	fmt.Fprintln(os.Stderr, "  void cancel_delegation_token(string token_str_form)")
	fmt.Fprintln(os.Stderr, "  bool add_token(string token_identifier, string delegation_token)")
	fmt.Fprintln(os.Stderr, "  bool remove_token(string token_identifier)")
	fmt.Fprintln(os.Stderr, "  string get_token(string token_identifier)")
	fmt.Fprintln(os.Stderr, "   get_all_token_identifiers()")
	fmt.Fprintln(os.Stderr, "  i32 add_master_key(string key)")
	fmt.Fprintln(os.Stderr, "  void update_master_key(i32 seq_number, string key)")
	fmt.Fprintln(os.Stderr, "  bool remove_master_key(i32 key_seq)")
	fmt.Fprintln(os.Stderr, "   get_master_keys()")
	fmt.Fprintln(os.Stderr, "  GetOpenTxnsResponse get_open_txns()")
	fmt.Fprintln(os.Stderr, "  GetOpenTxnsInfoResponse get_open_txns_info()")
	fmt.Fprintln(os.Stderr, "  OpenTxnsResponse open_txns(OpenTxnRequest rqst)")
	fmt.Fprintln(os.Stderr, "  void abort_txn(AbortTxnRequest rqst)")
	fmt.Fprintln(os.Stderr, "  void abort_txns(AbortTxnsRequest rqst)")
	fmt.Fprintln(os.Stderr, "  void commit_txn(CommitTxnRequest rqst)")
	fmt.Fprintln(os.Stderr, "  LockResponse lock(LockRequest rqst)")
	fmt.Fprintln(os.Stderr, "  LockResponse check_lock(CheckLockRequest rqst)")
	fmt.Fprintln(os.Stderr, "  void unlock(UnlockRequest rqst)")
	fmt.Fprintln(os.Stderr, "  ShowLocksResponse show_locks(ShowLocksRequest rqst)")
	fmt.Fprintln(os.Stderr, "  void heartbeat(HeartbeatRequest ids)")
	fmt.Fprintln(os.Stderr, "  HeartbeatTxnRangeResponse heartbeat_txn_range(HeartbeatTxnRangeRequest txns)")
	fmt.Fprintln(os.Stderr, "  void compact(CompactionRequest rqst)")
	fmt.Fprintln(os.Stderr, "  CompactionResponse compact2(CompactionRequest rqst)")
	fmt.Fprintln(os.Stderr, "  ShowCompactResponse show_compact(ShowCompactRequest rqst)")
	fmt.Fprintln(os.Stderr, "  void add_dynamic_partitions(AddDynamicPartitions rqst)")
	fmt.Fprintln(os.Stderr, "  NotificationEventResponse get_next_notification(NotificationEventRequest rqst)")
	fmt.Fprintln(os.Stderr, "  CurrentNotificationEventId get_current_notificationEventId()")
	fmt.Fprintln(os.Stderr, "  NotificationEventsCountResponse get_notification_events_count(NotificationEventsCountRequest rqst)")
	fmt.Fprintln(os.Stderr, "  FireEventResponse fire_listener_event(FireEventRequest rqst)")
	fmt.Fprintln(os.Stderr, "  void flushCache()")
	fmt.Fprintln(os.Stderr, "  CmRecycleResponse cm_recycle(CmRecycleRequest request)")
	fmt.Fprintln(os.Stderr, "  GetFileMetadataByExprResult get_file_metadata_by_expr(GetFileMetadataByExprRequest req)")
	fmt.Fprintln(os.Stderr, "  GetFileMetadataResult get_file_metadata(GetFileMetadataRequest req)")
	fmt.Fprintln(os.Stderr, "  PutFileMetadataResult put_file_metadata(PutFileMetadataRequest req)")
	fmt.Fprintln(os.Stderr, "  ClearFileMetadataResult clear_file_metadata(ClearFileMetadataRequest req)")
	fmt.Fprintln(os.Stderr, "  CacheFileMetadataResult cache_file_metadata(CacheFileMetadataRequest req)")
	fmt.Fprintln(os.Stderr, "  string get_metastore_db_uuid()")
	fmt.Fprintln(os.Stderr, "  WMCreateResourcePlanResponse create_resource_plan(WMCreateResourcePlanRequest request)")
	fmt.Fprintln(os.Stderr, "  WMGetResourcePlanResponse get_resource_plan(WMGetResourcePlanRequest request)")
	fmt.Fprintln(os.Stderr, "  WMGetActiveResourcePlanResponse get_active_resource_plan(WMGetActiveResourcePlanRequest request)")
	fmt.Fprintln(os.Stderr, "  WMGetAllResourcePlanResponse get_all_resource_plans(WMGetAllResourcePlanRequest request)")
	fmt.Fprintln(os.Stderr, "  WMAlterResourcePlanResponse alter_resource_plan(WMAlterResourcePlanRequest request)")
	fmt.Fprintln(os.Stderr, "  WMValidateResourcePlanResponse validate_resource_plan(WMValidateResourcePlanRequest request)")
	fmt.Fprintln(os.Stderr, "  WMDropResourcePlanResponse drop_resource_plan(WMDropResourcePlanRequest request)")
	fmt.Fprintln(os.Stderr, "  WMCreateTriggerResponse create_wm_trigger(WMCreateTriggerRequest request)")
	fmt.Fprintln(os.Stderr, "  WMAlterTriggerResponse alter_wm_trigger(WMAlterTriggerRequest request)")
	fmt.Fprintln(os.Stderr, "  WMDropTriggerResponse drop_wm_trigger(WMDropTriggerRequest request)")
	fmt.Fprintln(os.Stderr, "  WMGetTriggersForResourePlanResponse get_triggers_for_resourceplan(WMGetTriggersForResourePlanRequest request)")
	fmt.Fprintln(os.Stderr)
	os.Exit(0)
}

type httpHeaders map[string]string

func (h httpHeaders) String() string {
	var m map[string]string = h
	return fmt.Sprintf("%s", m)
}

func (h httpHeaders) Set(value string) error {
	parts := strings.Split(value, ": ")
	if len(parts) != 2 {
		return fmt.Errorf("header should be of format 'Key: Value'")
	}
	h[parts[0]] = parts[1]
	return nil
}

func main() {
	flag.Usage = Usage
	var host string
	var port int
	var protocol string
	var urlString string
	var framed bool
	var useHttp bool
	headers := make(httpHeaders)
	var parsedUrl *url.URL
	var trans thrift.TTransport
	_ = strconv.Atoi
	_ = math.Abs
	flag.Usage = Usage
	flag.StringVar(&host, "h", "localhost", "Specify host and port")
	flag.IntVar(&port, "p", 9090, "Specify port")
	flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
	flag.StringVar(&urlString, "u", "", "Specify the url")
	flag.BoolVar(&framed, "framed", false, "Use framed transport")
	flag.BoolVar(&useHttp, "http", false, "Use http")
	flag.Var(headers, "H", "Headers to set on the http(s) request (e.g. -H \"Key: Value\")")
	flag.Parse()

	if len(urlString) > 0 {
		var err error
		parsedUrl, err = url.Parse(urlString)
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
		host = parsedUrl.Host
		useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http" || parsedUrl.Scheme == "https"
	} else if useHttp {
		_, err := url.Parse(fmt.Sprint("http://", host, ":", port))
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
	}

	cmd := flag.Arg(0)
	var err error
	var cfg *thrift.TConfiguration = nil
	if useHttp {
		trans, err = thrift.NewTHttpClient(parsedUrl.String())
		if len(headers) > 0 {
			httptrans := trans.(*thrift.THttpClient)
			for key, value := range headers {
				httptrans.SetHeader(key, value)
			}
		}
	} else {
		portStr := fmt.Sprint(port)
		if strings.Contains(host, ":") {
			host, portStr, err = net.SplitHostPort(host)
			if err != nil {
				fmt.Fprintln(os.Stderr, "error with host:", err)
				os.Exit(1)
			}
		}
		trans = thrift.NewTSocketConf(net.JoinHostPort(host, portStr), cfg)
		if err != nil {
			fmt.Fprintln(os.Stderr, "error resolving address:", err)
			os.Exit(1)
		}
		if framed {
			trans = thrift.NewTFramedTransportConf(trans, cfg)
		}
	}
	if err != nil {
		fmt.Fprintln(os.Stderr, "Error creating transport", err)
		os.Exit(1)
	}
	defer trans.Close()
	var protocolFactory thrift.TProtocolFactory
	switch protocol {
	case "compact":
		protocolFactory = thrift.NewTCompactProtocolFactoryConf(cfg)
		break
	case "simplejson":
		protocolFactory = thrift.NewTSimpleJSONProtocolFactoryConf(cfg)
		break
	case "json":
		protocolFactory = thrift.NewTJSONProtocolFactory()
		break
	case "binary", "":
		protocolFactory = thrift.NewTBinaryProtocolFactoryConf(cfg)
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
		Usage()
		os.Exit(1)
	}
	iprot := protocolFactory.GetProtocol(trans)
	oprot := protocolFactory.GetProtocol(trans)
	client := hive_metastore.NewThriftHiveMetastoreClient(thrift.NewTStandardClient(iprot, oprot))
	if err := trans.Open(); err != nil {
		fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
		os.Exit(1)
	}

	switch cmd {
	case "getMetaConf":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetMetaConf requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetMetaConf(context.Background(), value0))
		fmt.Print("\n")
		break
	case "setMetaConf":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "SetMetaConf requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.SetMetaConf(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "create_database":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CreateDatabase requires 1 args")
			flag.Usage()
		}
		arg867 := flag.Arg(1)
		mbTrans868 := thrift.NewTMemoryBufferLen(len(arg867))
		defer mbTrans868.Close()
		_, err869 := mbTrans868.WriteString(arg867)
		if err869 != nil {
			Usage()
			return
		}
		factory870 := thrift.NewTJSONProtocolFactory()
		jsProt871 := factory870.GetProtocol(mbTrans868)
		argvalue0 := hive_metastore.NewDatabase()
		err872 := argvalue0.Read(context.Background(), jsProt871)
		if err872 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.CreateDatabase(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_database":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetDatabase requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetDatabase(context.Background(), value0))
		fmt.Print("\n")
		break
	case "drop_database":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "DropDatabase requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2) == "true"
		value1 := argvalue1
		argvalue2 := flag.Arg(3) == "true"
		value2 := argvalue2
		fmt.Print(client.DropDatabase(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "get_databases":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetDatabases requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetDatabases(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_all_databases":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetAllDatabases requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetAllDatabases(context.Background()))
		fmt.Print("\n")
		break
	case "alter_database":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "AlterDatabase requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg879 := flag.Arg(2)
		mbTrans880 := thrift.NewTMemoryBufferLen(len(arg879))
		defer mbTrans880.Close()
		_, err881 := mbTrans880.WriteString(arg879)
		if err881 != nil {
			Usage()
			return
		}
		factory882 := thrift.NewTJSONProtocolFactory()
		jsProt883 := factory882.GetProtocol(mbTrans880)
		argvalue1 := hive_metastore.NewDatabase()
		err884 := argvalue1.Read(context.Background(), jsProt883)
		if err884 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.AlterDatabase(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "get_type":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetType requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetType(context.Background(), value0))
		fmt.Print("\n")
		break
	case "create_type":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CreateType requires 1 args")
			flag.Usage()
		}
		arg886 := flag.Arg(1)
		mbTrans887 := thrift.NewTMemoryBufferLen(len(arg886))
		defer mbTrans887.Close()
		_, err888 := mbTrans887.WriteString(arg886)
		if err888 != nil {
			Usage()
			return
		}
		factory889 := thrift.NewTJSONProtocolFactory()
		jsProt890 := factory889.GetProtocol(mbTrans887)
		argvalue0 := hive_metastore.NewType()
		err891 := argvalue0.Read(context.Background(), jsProt890)
		if err891 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.CreateType(context.Background(), value0))
		fmt.Print("\n")
		break
	case "drop_type":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DropType requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.DropType(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_type_all":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetTypeAll requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetTypeAll(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_fields":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetFields requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.GetFields(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "get_fields_with_environment_context":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetFieldsWithEnvironmentContext requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg898 := flag.Arg(3)
		mbTrans899 := thrift.NewTMemoryBufferLen(len(arg898))
		defer mbTrans899.Close()
		_, err900 := mbTrans899.WriteString(arg898)
		if err900 != nil {
			Usage()
			return
		}
		factory901 := thrift.NewTJSONProtocolFactory()
		jsProt902 := factory901.GetProtocol(mbTrans899)
		argvalue2 := hive_metastore.NewEnvironmentContext()
		err903 := argvalue2.Read(context.Background(), jsProt902)
		if err903 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		fmt.Print(client.GetFieldsWithEnvironmentContext(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "get_schema":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetSchema requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.GetSchema(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "get_schema_with_environment_context":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetSchemaWithEnvironmentContext requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg908 := flag.Arg(3)
		mbTrans909 := thrift.NewTMemoryBufferLen(len(arg908))
		defer mbTrans909.Close()
		_, err910 := mbTrans909.WriteString(arg908)
		if err910 != nil {
			Usage()
			return
		}
		factory911 := thrift.NewTJSONProtocolFactory()
		jsProt912 := factory911.GetProtocol(mbTrans909)
		argvalue2 := hive_metastore.NewEnvironmentContext()
		err913 := argvalue2.Read(context.Background(), jsProt912)
		if err913 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		fmt.Print(client.GetSchemaWithEnvironmentContext(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "create_table":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CreateTable requires 1 args")
			flag.Usage()
		}
		arg914 := flag.Arg(1)
		mbTrans915 := thrift.NewTMemoryBufferLen(len(arg914))
		defer mbTrans915.Close()
		_, err916 := mbTrans915.WriteString(arg914)
		if err916 != nil {
			Usage()
			return
		}
		factory917 := thrift.NewTJSONProtocolFactory()
		jsProt918 := factory917.GetProtocol(mbTrans915)
		argvalue0 := hive_metastore.NewTable()
		err919 := argvalue0.Read(context.Background(), jsProt918)
		if err919 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.CreateTable(context.Background(), value0))
		fmt.Print("\n")
		break
	case "create_table_with_environment_context":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "CreateTableWithEnvironmentContext requires 2 args")
			flag.Usage()
		}
		arg920 := flag.Arg(1)
		mbTrans921 := thrift.NewTMemoryBufferLen(len(arg920))
		defer mbTrans921.Close()
		_, err922 := mbTrans921.WriteString(arg920)
		if err922 != nil {
			Usage()
			return
		}
		factory923 := thrift.NewTJSONProtocolFactory()
		jsProt924 := factory923.GetProtocol(mbTrans921)
		argvalue0 := hive_metastore.NewTable()
		err925 := argvalue0.Read(context.Background(), jsProt924)
		if err925 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		arg926 := flag.Arg(2)
		mbTrans927 := thrift.NewTMemoryBufferLen(len(arg926))
		defer mbTrans927.Close()
		_, err928 := mbTrans927.WriteString(arg926)
		if err928 != nil {
			Usage()
			return
		}
		factory929 := thrift.NewTJSONProtocolFactory()
		jsProt930 := factory929.GetProtocol(mbTrans927)
		argvalue1 := hive_metastore.NewEnvironmentContext()
		err931 := argvalue1.Read(context.Background(), jsProt930)
		if err931 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.CreateTableWithEnvironmentContext(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "create_table_with_constraints":
		if flag.NArg()-1 != 5 {
			fmt.Fprintln(os.Stderr, "CreateTableWithConstraints requires 5 args")
			flag.Usage()
		}
		arg932 := flag.Arg(1)
		mbTrans933 := thrift.NewTMemoryBufferLen(len(arg932))
		defer mbTrans933.Close()
		_, err934 := mbTrans933.WriteString(arg932)
		if err934 != nil {
			Usage()
			return
		}
		factory935 := thrift.NewTJSONProtocolFactory()
		jsProt936 := factory935.GetProtocol(mbTrans933)
		argvalue0 := hive_metastore.NewTable()
		err937 := argvalue0.Read(context.Background(), jsProt936)
		if err937 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		arg938 := flag.Arg(2)
		mbTrans939 := thrift.NewTMemoryBufferLen(len(arg938))
		defer mbTrans939.Close()
		_, err940 := mbTrans939.WriteString(arg938)
		if err940 != nil {
			Usage()
			return
		}
		factory941 := thrift.NewTJSONProtocolFactory()
		jsProt942 := factory941.GetProtocol(mbTrans939)
		containerStruct1 := hive_metastore.NewThriftHiveMetastoreCreateTableWithConstraintsArgs()
		err943 := containerStruct1.ReadField2(context.Background(), jsProt942)
		if err943 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.PrimaryKeys
		value1 := argvalue1
		arg944 := flag.Arg(3)
		mbTrans945 := thrift.NewTMemoryBufferLen(len(arg944))
		defer mbTrans945.Close()
		_, err946 := mbTrans945.WriteString(arg944)
		if err946 != nil {
			Usage()
			return
		}
		factory947 := thrift.NewTJSONProtocolFactory()
		jsProt948 := factory947.GetProtocol(mbTrans945)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreCreateTableWithConstraintsArgs()
		err949 := containerStruct2.ReadField3(context.Background(), jsProt948)
		if err949 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.ForeignKeys
		value2 := argvalue2
		arg950 := flag.Arg(4)
		mbTrans951 := thrift.NewTMemoryBufferLen(len(arg950))
		defer mbTrans951.Close()
		_, err952 := mbTrans951.WriteString(arg950)
		if err952 != nil {
			Usage()
			return
		}
		factory953 := thrift.NewTJSONProtocolFactory()
		jsProt954 := factory953.GetProtocol(mbTrans951)
		containerStruct3 := hive_metastore.NewThriftHiveMetastoreCreateTableWithConstraintsArgs()
		err955 := containerStruct3.ReadField4(context.Background(), jsProt954)
		if err955 != nil {
			Usage()
			return
		}
		argvalue3 := containerStruct3.UniqueConstraints
		value3 := argvalue3
		arg956 := flag.Arg(5)
		mbTrans957 := thrift.NewTMemoryBufferLen(len(arg956))
		defer mbTrans957.Close()
		_, err958 := mbTrans957.WriteString(arg956)
		if err958 != nil {
			Usage()
			return
		}
		factory959 := thrift.NewTJSONProtocolFactory()
		jsProt960 := factory959.GetProtocol(mbTrans957)
		containerStruct4 := hive_metastore.NewThriftHiveMetastoreCreateTableWithConstraintsArgs()
		err961 := containerStruct4.ReadField5(context.Background(), jsProt960)
		if err961 != nil {
			Usage()
			return
		}
		argvalue4 := containerStruct4.NotNullConstraints
		value4 := argvalue4
		fmt.Print(client.CreateTableWithConstraints(context.Background(), value0, value1, value2, value3, value4))
		fmt.Print("\n")
		break
	case "drop_constraint":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DropConstraint requires 1 args")
			flag.Usage()
		}
		arg962 := flag.Arg(1)
		mbTrans963 := thrift.NewTMemoryBufferLen(len(arg962))
		defer mbTrans963.Close()
		_, err964 := mbTrans963.WriteString(arg962)
		if err964 != nil {
			Usage()
			return
		}
		factory965 := thrift.NewTJSONProtocolFactory()
		jsProt966 := factory965.GetProtocol(mbTrans963)
		argvalue0 := hive_metastore.NewDropConstraintRequest()
		err967 := argvalue0.Read(context.Background(), jsProt966)
		if err967 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.DropConstraint(context.Background(), value0))
		fmt.Print("\n")
		break
	case "add_primary_key":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AddPrimaryKey requires 1 args")
			flag.Usage()
		}
		arg968 := flag.Arg(1)
		mbTrans969 := thrift.NewTMemoryBufferLen(len(arg968))
		defer mbTrans969.Close()
		_, err970 := mbTrans969.WriteString(arg968)
		if err970 != nil {
			Usage()
			return
		}
		factory971 := thrift.NewTJSONProtocolFactory()
		jsProt972 := factory971.GetProtocol(mbTrans969)
		argvalue0 := hive_metastore.NewAddPrimaryKeyRequest()
		err973 := argvalue0.Read(context.Background(), jsProt972)
		if err973 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.AddPrimaryKey(context.Background(), value0))
		fmt.Print("\n")
		break
	case "add_foreign_key":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AddForeignKey requires 1 args")
			flag.Usage()
		}
		arg974 := flag.Arg(1)
		mbTrans975 := thrift.NewTMemoryBufferLen(len(arg974))
		defer mbTrans975.Close()
		_, err976 := mbTrans975.WriteString(arg974)
		if err976 != nil {
			Usage()
			return
		}
		factory977 := thrift.NewTJSONProtocolFactory()
		jsProt978 := factory977.GetProtocol(mbTrans975)
		argvalue0 := hive_metastore.NewAddForeignKeyRequest()
		err979 := argvalue0.Read(context.Background(), jsProt978)
		if err979 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.AddForeignKey(context.Background(), value0))
		fmt.Print("\n")
		break
	case "add_unique_constraint":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AddUniqueConstraint requires 1 args")
			flag.Usage()
		}
		arg980 := flag.Arg(1)
		mbTrans981 := thrift.NewTMemoryBufferLen(len(arg980))
		defer mbTrans981.Close()
		_, err982 := mbTrans981.WriteString(arg980)
		if err982 != nil {
			Usage()
			return
		}
		factory983 := thrift.NewTJSONProtocolFactory()
		jsProt984 := factory983.GetProtocol(mbTrans981)
		argvalue0 := hive_metastore.NewAddUniqueConstraintRequest()
		err985 := argvalue0.Read(context.Background(), jsProt984)
		if err985 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.AddUniqueConstraint(context.Background(), value0))
		fmt.Print("\n")
		break
	case "add_not_null_constraint":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AddNotNullConstraint requires 1 args")
			flag.Usage()
		}
		arg986 := flag.Arg(1)
		mbTrans987 := thrift.NewTMemoryBufferLen(len(arg986))
		defer mbTrans987.Close()
		_, err988 := mbTrans987.WriteString(arg986)
		if err988 != nil {
			Usage()
			return
		}
		factory989 := thrift.NewTJSONProtocolFactory()
		jsProt990 := factory989.GetProtocol(mbTrans987)
		argvalue0 := hive_metastore.NewAddNotNullConstraintRequest()
		err991 := argvalue0.Read(context.Background(), jsProt990)
		if err991 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.AddNotNullConstraint(context.Background(), value0))
		fmt.Print("\n")
		break
	case "drop_table":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "DropTable requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3) == "true"
		value2 := argvalue2
		fmt.Print(client.DropTable(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "drop_table_with_environment_context":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "DropTableWithEnvironmentContext requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3) == "true"
		value2 := argvalue2
		arg998 := flag.Arg(4)
		mbTrans999 := thrift.NewTMemoryBufferLen(len(arg998))
		defer mbTrans999.Close()
		_, err1000 := mbTrans999.WriteString(arg998)
		if err1000 != nil {
			Usage()
			return
		}
		factory1001 := thrift.NewTJSONProtocolFactory()
		jsProt1002 := factory1001.GetProtocol(mbTrans999)
		argvalue3 := hive_metastore.NewEnvironmentContext()
		err1003 := argvalue3.Read(context.Background(), jsProt1002)
		if err1003 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		fmt.Print(client.DropTableWithEnvironmentContext(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "truncate_table":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "TruncateTable requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg1006 := flag.Arg(3)
		mbTrans1007 := thrift.NewTMemoryBufferLen(len(arg1006))
		defer mbTrans1007.Close()
		_, err1008 := mbTrans1007.WriteString(arg1006)
		if err1008 != nil {
			Usage()
			return
		}
		factory1009 := thrift.NewTJSONProtocolFactory()
		jsProt1010 := factory1009.GetProtocol(mbTrans1007)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreTruncateTableArgs()
		err1011 := containerStruct2.ReadField3(context.Background(), jsProt1010)
		if err1011 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.PartNames
		value2 := argvalue2
		fmt.Print(client.TruncateTable(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "get_tables":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetTables requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.GetTables(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "get_tables_by_type":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetTablesByType requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.GetTablesByType(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "get_table_meta":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetTableMeta requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg1019 := flag.Arg(3)
		mbTrans1020 := thrift.NewTMemoryBufferLen(len(arg1019))
		defer mbTrans1020.Close()
		_, err1021 := mbTrans1020.WriteString(arg1019)
		if err1021 != nil {
			Usage()
			return
		}
		factory1022 := thrift.NewTJSONProtocolFactory()
		jsProt1023 := factory1022.GetProtocol(mbTrans1020)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreGetTableMetaArgs()
		err1024 := containerStruct2.ReadField3(context.Background(), jsProt1023)
		if err1024 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.TblTypes
		value2 := argvalue2
		fmt.Print(client.GetTableMeta(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "get_all_tables":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetAllTables requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetAllTables(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_table":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetTable requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.GetTable(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "get_table_objects_by_name":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetTableObjectsByName requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg1029 := flag.Arg(2)
		mbTrans1030 := thrift.NewTMemoryBufferLen(len(arg1029))
		defer mbTrans1030.Close()
		_, err1031 := mbTrans1030.WriteString(arg1029)
		if err1031 != nil {
			Usage()
			return
		}
		factory1032 := thrift.NewTJSONProtocolFactory()
		jsProt1033 := factory1032.GetProtocol(mbTrans1030)
		containerStruct1 := hive_metastore.NewThriftHiveMetastoreGetTableObjectsByNameArgs()
		err1034 := containerStruct1.ReadField2(context.Background(), jsProt1033)
		if err1034 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.TblNames
		value1 := argvalue1
		fmt.Print(client.GetTableObjectsByName(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "get_table_req":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetTableReq requires 1 args")
			flag.Usage()
		}
		arg1035 := flag.Arg(1)
		mbTrans1036 := thrift.NewTMemoryBufferLen(len(arg1035))
		defer mbTrans1036.Close()
		_, err1037 := mbTrans1036.WriteString(arg1035)
		if err1037 != nil {
			Usage()
			return
		}
		factory1038 := thrift.NewTJSONProtocolFactory()
		jsProt1039 := factory1038.GetProtocol(mbTrans1036)
		argvalue0 := hive_metastore.NewGetTableRequest()
		err1040 := argvalue0.Read(context.Background(), jsProt1039)
		if err1040 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetTableReq(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_table_objects_by_name_req":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetTableObjectsByNameReq requires 1 args")
			flag.Usage()
		}
		arg1041 := flag.Arg(1)
		mbTrans1042 := thrift.NewTMemoryBufferLen(len(arg1041))
		defer mbTrans1042.Close()
		_, err1043 := mbTrans1042.WriteString(arg1041)
		if err1043 != nil {
			Usage()
			return
		}
		factory1044 := thrift.NewTJSONProtocolFactory()
		jsProt1045 := factory1044.GetProtocol(mbTrans1042)
		argvalue0 := hive_metastore.NewGetTablesRequest()
		err1046 := argvalue0.Read(context.Background(), jsProt1045)
		if err1046 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetTableObjectsByNameReq(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_table_names_by_filter":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetTableNamesByFilter requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		tmp2, err1049 := (strconv.Atoi(flag.Arg(3)))
		if err1049 != nil {
			Usage()
			return
		}
		argvalue2 := int16(tmp2)
		value2 := argvalue2
		fmt.Print(client.GetTableNamesByFilter(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "alter_table":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "AlterTable requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg1052 := flag.Arg(3)
		mbTrans1053 := thrift.NewTMemoryBufferLen(len(arg1052))
		defer mbTrans1053.Close()
		_, err1054 := mbTrans1053.WriteString(arg1052)
		if err1054 != nil {
			Usage()
			return
		}
		factory1055 := thrift.NewTJSONProtocolFactory()
		jsProt1056 := factory1055.GetProtocol(mbTrans1053)
		argvalue2 := hive_metastore.NewTable()
		err1057 := argvalue2.Read(context.Background(), jsProt1056)
		if err1057 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		fmt.Print(client.AlterTable(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "alter_table_with_environment_context":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "AlterTableWithEnvironmentContext requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg1060 := flag.Arg(3)
		mbTrans1061 := thrift.NewTMemoryBufferLen(len(arg1060))
		defer mbTrans1061.Close()
		_, err1062 := mbTrans1061.WriteString(arg1060)
		if err1062 != nil {
			Usage()
			return
		}
		factory1063 := thrift.NewTJSONProtocolFactory()
		jsProt1064 := factory1063.GetProtocol(mbTrans1061)
		argvalue2 := hive_metastore.NewTable()
		err1065 := argvalue2.Read(context.Background(), jsProt1064)
		if err1065 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		arg1066 := flag.Arg(4)
		mbTrans1067 := thrift.NewTMemoryBufferLen(len(arg1066))
		defer mbTrans1067.Close()
		_, err1068 := mbTrans1067.WriteString(arg1066)
		if err1068 != nil {
			Usage()
			return
		}
		factory1069 := thrift.NewTJSONProtocolFactory()
		jsProt1070 := factory1069.GetProtocol(mbTrans1067)
		argvalue3 := hive_metastore.NewEnvironmentContext()
		err1071 := argvalue3.Read(context.Background(), jsProt1070)
		if err1071 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		fmt.Print(client.AlterTableWithEnvironmentContext(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "alter_table_with_cascade":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "AlterTableWithCascade requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg1074 := flag.Arg(3)
		mbTrans1075 := thrift.NewTMemoryBufferLen(len(arg1074))
		defer mbTrans1075.Close()
		_, err1076 := mbTrans1075.WriteString(arg1074)
		if err1076 != nil {
			Usage()
			return
		}
		factory1077 := thrift.NewTJSONProtocolFactory()
		jsProt1078 := factory1077.GetProtocol(mbTrans1075)
		argvalue2 := hive_metastore.NewTable()
		err1079 := argvalue2.Read(context.Background(), jsProt1078)
		if err1079 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		argvalue3 := flag.Arg(4) == "true"
		value3 := argvalue3
		fmt.Print(client.AlterTableWithCascade(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "add_partition":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AddPartition requires 1 args")
			flag.Usage()
		}
		arg1081 := flag.Arg(1)
		mbTrans1082 := thrift.NewTMemoryBufferLen(len(arg1081))
		defer mbTrans1082.Close()
		_, err1083 := mbTrans1082.WriteString(arg1081)
		if err1083 != nil {
			Usage()
			return
		}
		factory1084 := thrift.NewTJSONProtocolFactory()
		jsProt1085 := factory1084.GetProtocol(mbTrans1082)
		argvalue0 := hive_metastore.NewPartition()
		err1086 := argvalue0.Read(context.Background(), jsProt1085)
		if err1086 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.AddPartition(context.Background(), value0))
		fmt.Print("\n")
		break
	case "add_partition_with_environment_context":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "AddPartitionWithEnvironmentContext requires 2 args")
			flag.Usage()
		}
		arg1087 := flag.Arg(1)
		mbTrans1088 := thrift.NewTMemoryBufferLen(len(arg1087))
		defer mbTrans1088.Close()
		_, err1089 := mbTrans1088.WriteString(arg1087)
		if err1089 != nil {
			Usage()
			return
		}
		factory1090 := thrift.NewTJSONProtocolFactory()
		jsProt1091 := factory1090.GetProtocol(mbTrans1088)
		argvalue0 := hive_metastore.NewPartition()
		err1092 := argvalue0.Read(context.Background(), jsProt1091)
		if err1092 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		arg1093 := flag.Arg(2)
		mbTrans1094 := thrift.NewTMemoryBufferLen(len(arg1093))
		defer mbTrans1094.Close()
		_, err1095 := mbTrans1094.WriteString(arg1093)
		if err1095 != nil {
			Usage()
			return
		}
		factory1096 := thrift.NewTJSONProtocolFactory()
		jsProt1097 := factory1096.GetProtocol(mbTrans1094)
		argvalue1 := hive_metastore.NewEnvironmentContext()
		err1098 := argvalue1.Read(context.Background(), jsProt1097)
		if err1098 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.AddPartitionWithEnvironmentContext(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "add_partitions":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AddPartitions requires 1 args")
			flag.Usage()
		}
		arg1099 := flag.Arg(1)
		mbTrans1100 := thrift.NewTMemoryBufferLen(len(arg1099))
		defer mbTrans1100.Close()
		_, err1101 := mbTrans1100.WriteString(arg1099)
		if err1101 != nil {
			Usage()
			return
		}
		factory1102 := thrift.NewTJSONProtocolFactory()
		jsProt1103 := factory1102.GetProtocol(mbTrans1100)
		containerStruct0 := hive_metastore.NewThriftHiveMetastoreAddPartitionsArgs()
		err1104 := containerStruct0.ReadField1(context.Background(), jsProt1103)
		if err1104 != nil {
			Usage()
			return
		}
		argvalue0 := containerStruct0.NewParts_
		value0 := argvalue0
		fmt.Print(client.AddPartitions(context.Background(), value0))
		fmt.Print("\n")
		break
	case "add_partitions_pspec":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AddPartitionsPspec requires 1 args")
			flag.Usage()
		}
		arg1105 := flag.Arg(1)
		mbTrans1106 := thrift.NewTMemoryBufferLen(len(arg1105))
		defer mbTrans1106.Close()
		_, err1107 := mbTrans1106.WriteString(arg1105)
		if err1107 != nil {
			Usage()
			return
		}
		factory1108 := thrift.NewTJSONProtocolFactory()
		jsProt1109 := factory1108.GetProtocol(mbTrans1106)
		containerStruct0 := hive_metastore.NewThriftHiveMetastoreAddPartitionsPspecArgs()
		err1110 := containerStruct0.ReadField1(context.Background(), jsProt1109)
		if err1110 != nil {
			Usage()
			return
		}
		argvalue0 := containerStruct0.NewParts_
		value0 := argvalue0
		fmt.Print(client.AddPartitionsPspec(context.Background(), value0))
		fmt.Print("\n")
		break
	case "append_partition":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "AppendPartition requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg1113 := flag.Arg(3)
		mbTrans1114 := thrift.NewTMemoryBufferLen(len(arg1113))
		defer mbTrans1114.Close()
		_, err1115 := mbTrans1114.WriteString(arg1113)
		if err1115 != nil {
			Usage()
			return
		}
		factory1116 := thrift.NewTJSONProtocolFactory()
		jsProt1117 := factory1116.GetProtocol(mbTrans1114)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreAppendPartitionArgs()
		err1118 := containerStruct2.ReadField3(context.Background(), jsProt1117)
		if err1118 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.PartVals
		value2 := argvalue2
		fmt.Print(client.AppendPartition(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "add_partitions_req":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AddPartitionsReq requires 1 args")
			flag.Usage()
		}
		arg1119 := flag.Arg(1)
		mbTrans1120 := thrift.NewTMemoryBufferLen(len(arg1119))
		defer mbTrans1120.Close()
		_, err1121 := mbTrans1120.WriteString(arg1119)
		if err1121 != nil {
			Usage()
			return
		}
		factory1122 := thrift.NewTJSONProtocolFactory()
		jsProt1123 := factory1122.GetProtocol(mbTrans1120)
		argvalue0 := hive_metastore.NewAddPartitionsRequest()
		err1124 := argvalue0.Read(context.Background(), jsProt1123)
		if err1124 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.AddPartitionsReq(context.Background(), value0))
		fmt.Print("\n")
		break
	case "append_partition_with_environment_context":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "AppendPartitionWithEnvironmentContext requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg1127 := flag.Arg(3)
		mbTrans1128 := thrift.NewTMemoryBufferLen(len(arg1127))
		defer mbTrans1128.Close()
		_, err1129 := mbTrans1128.WriteString(arg1127)
		if err1129 != nil {
			Usage()
			return
		}
		factory1130 := thrift.NewTJSONProtocolFactory()
		jsProt1131 := factory1130.GetProtocol(mbTrans1128)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreAppendPartitionWithEnvironmentContextArgs()
		err1132 := containerStruct2.ReadField3(context.Background(), jsProt1131)
		if err1132 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.PartVals
		value2 := argvalue2
		arg1133 := flag.Arg(4)
		mbTrans1134 := thrift.NewTMemoryBufferLen(len(arg1133))
		defer mbTrans1134.Close()
		_, err1135 := mbTrans1134.WriteString(arg1133)
		if err1135 != nil {
			Usage()
			return
		}
		factory1136 := thrift.NewTJSONProtocolFactory()
		jsProt1137 := factory1136.GetProtocol(mbTrans1134)
		argvalue3 := hive_metastore.NewEnvironmentContext()
		err1138 := argvalue3.Read(context.Background(), jsProt1137)
		if err1138 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		fmt.Print(client.AppendPartitionWithEnvironmentContext(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "append_partition_by_name":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "AppendPartitionByName requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.AppendPartitionByName(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "append_partition_by_name_with_environment_context":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "AppendPartitionByNameWithEnvironmentContext requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		arg1145 := flag.Arg(4)
		mbTrans1146 := thrift.NewTMemoryBufferLen(len(arg1145))
		defer mbTrans1146.Close()
		_, err1147 := mbTrans1146.WriteString(arg1145)
		if err1147 != nil {
			Usage()
			return
		}
		factory1148 := thrift.NewTJSONProtocolFactory()
		jsProt1149 := factory1148.GetProtocol(mbTrans1146)
		argvalue3 := hive_metastore.NewEnvironmentContext()
		err1150 := argvalue3.Read(context.Background(), jsProt1149)
		if err1150 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		fmt.Print(client.AppendPartitionByNameWithEnvironmentContext(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "drop_partition":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "DropPartition requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg1153 := flag.Arg(3)
		mbTrans1154 := thrift.NewTMemoryBufferLen(len(arg1153))
		defer mbTrans1154.Close()
		_, err1155 := mbTrans1154.WriteString(arg1153)
		if err1155 != nil {
			Usage()
			return
		}
		factory1156 := thrift.NewTJSONProtocolFactory()
		jsProt1157 := factory1156.GetProtocol(mbTrans1154)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreDropPartitionArgs()
		err1158 := containerStruct2.ReadField3(context.Background(), jsProt1157)
		if err1158 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.PartVals
		value2 := argvalue2
		argvalue3 := flag.Arg(4) == "true"
		value3 := argvalue3
		fmt.Print(client.DropPartition(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "drop_partition_with_environment_context":
		if flag.NArg()-1 != 5 {
			fmt.Fprintln(os.Stderr, "DropPartitionWithEnvironmentContext requires 5 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg1162 := flag.Arg(3)
		mbTrans1163 := thrift.NewTMemoryBufferLen(len(arg1162))
		defer mbTrans1163.Close()
		_, err1164 := mbTrans1163.WriteString(arg1162)
		if err1164 != nil {
			Usage()
			return
		}
		factory1165 := thrift.NewTJSONProtocolFactory()
		jsProt1166 := factory1165.GetProtocol(mbTrans1163)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreDropPartitionWithEnvironmentContextArgs()
		err1167 := containerStruct2.ReadField3(context.Background(), jsProt1166)
		if err1167 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.PartVals
		value2 := argvalue2
		argvalue3 := flag.Arg(4) == "true"
		value3 := argvalue3
		arg1169 := flag.Arg(5)
		mbTrans1170 := thrift.NewTMemoryBufferLen(len(arg1169))
		defer mbTrans1170.Close()
		_, err1171 := mbTrans1170.WriteString(arg1169)
		if err1171 != nil {
			Usage()
			return
		}
		factory1172 := thrift.NewTJSONProtocolFactory()
		jsProt1173 := factory1172.GetProtocol(mbTrans1170)
		argvalue4 := hive_metastore.NewEnvironmentContext()
		err1174 := argvalue4.Read(context.Background(), jsProt1173)
		if err1174 != nil {
			Usage()
			return
		}
		value4 := argvalue4
		fmt.Print(client.DropPartitionWithEnvironmentContext(context.Background(), value0, value1, value2, value3, value4))
		fmt.Print("\n")
		break
	case "drop_partition_by_name":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "DropPartitionByName requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		argvalue3 := flag.Arg(4) == "true"
		value3 := argvalue3
		fmt.Print(client.DropPartitionByName(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "drop_partition_by_name_with_environment_context":
		if flag.NArg()-1 != 5 {
			fmt.Fprintln(os.Stderr, "DropPartitionByNameWithEnvironmentContext requires 5 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		argvalue3 := flag.Arg(4) == "true"
		value3 := argvalue3
		arg1183 := flag.Arg(5)
		mbTrans1184 := thrift.NewTMemoryBufferLen(len(arg1183))
		defer mbTrans1184.Close()
		_, err1185 := mbTrans1184.WriteString(arg1183)
		if err1185 != nil {
			Usage()
			return
		}
		factory1186 := thrift.NewTJSONProtocolFactory()
		jsProt1187 := factory1186.GetProtocol(mbTrans1184)
		argvalue4 := hive_metastore.NewEnvironmentContext()
		err1188 := argvalue4.Read(context.Background(), jsProt1187)
		if err1188 != nil {
			Usage()
			return
		}
		value4 := argvalue4
		fmt.Print(client.DropPartitionByNameWithEnvironmentContext(context.Background(), value0, value1, value2, value3, value4))
		fmt.Print("\n")
		break
	case "drop_partitions_req":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DropPartitionsReq requires 1 args")
			flag.Usage()
		}
		arg1189 := flag.Arg(1)
		mbTrans1190 := thrift.NewTMemoryBufferLen(len(arg1189))
		defer mbTrans1190.Close()
		_, err1191 := mbTrans1190.WriteString(arg1189)
		if err1191 != nil {
			Usage()
			return
		}
		factory1192 := thrift.NewTJSONProtocolFactory()
		jsProt1193 := factory1192.GetProtocol(mbTrans1190)
		argvalue0 := hive_metastore.NewDropPartitionsRequest()
		err1194 := argvalue0.Read(context.Background(), jsProt1193)
		if err1194 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.DropPartitionsReq(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_partition":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetPartition requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg1197 := flag.Arg(3)
		mbTrans1198 := thrift.NewTMemoryBufferLen(len(arg1197))
		defer mbTrans1198.Close()
		_, err1199 := mbTrans1198.WriteString(arg1197)
		if err1199 != nil {
			Usage()
			return
		}
		factory1200 := thrift.NewTJSONProtocolFactory()
		jsProt1201 := factory1200.GetProtocol(mbTrans1198)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreGetPartitionArgs()
		err1202 := containerStruct2.ReadField3(context.Background(), jsProt1201)
		if err1202 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.PartVals
		value2 := argvalue2
		fmt.Print(client.GetPartition(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "exchange_partition":
		if flag.NArg()-1 != 5 {
			fmt.Fprintln(os.Stderr, "ExchangePartition requires 5 args")
			flag.Usage()
		}
		arg1203 := flag.Arg(1)
		mbTrans1204 := thrift.NewTMemoryBufferLen(len(arg1203))
		defer mbTrans1204.Close()
		_, err1205 := mbTrans1204.WriteString(arg1203)
		if err1205 != nil {
			Usage()
			return
		}
		factory1206 := thrift.NewTJSONProtocolFactory()
		jsProt1207 := factory1206.GetProtocol(mbTrans1204)
		containerStruct0 := hive_metastore.NewThriftHiveMetastoreExchangePartitionArgs()
		err1208 := containerStruct0.ReadField1(context.Background(), jsProt1207)
		if err1208 != nil {
			Usage()
			return
		}
		argvalue0 := containerStruct0.PartitionSpecs
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		argvalue3 := flag.Arg(4)
		value3 := argvalue3
		argvalue4 := flag.Arg(5)
		value4 := argvalue4
		fmt.Print(client.ExchangePartition(context.Background(), value0, value1, value2, value3, value4))
		fmt.Print("\n")
		break
	case "exchange_partitions":
		if flag.NArg()-1 != 5 {
			fmt.Fprintln(os.Stderr, "ExchangePartitions requires 5 args")
			flag.Usage()
		}
		arg1213 := flag.Arg(1)
		mbTrans1214 := thrift.NewTMemoryBufferLen(len(arg1213))
		defer mbTrans1214.Close()
		_, err1215 := mbTrans1214.WriteString(arg1213)
		if err1215 != nil {
			Usage()
			return
		}
		factory1216 := thrift.NewTJSONProtocolFactory()
		jsProt1217 := factory1216.GetProtocol(mbTrans1214)
		containerStruct0 := hive_metastore.NewThriftHiveMetastoreExchangePartitionsArgs()
		err1218 := containerStruct0.ReadField1(context.Background(), jsProt1217)
		if err1218 != nil {
			Usage()
			return
		}
		argvalue0 := containerStruct0.PartitionSpecs
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		argvalue3 := flag.Arg(4)
		value3 := argvalue3
		argvalue4 := flag.Arg(5)
		value4 := argvalue4
		fmt.Print(client.ExchangePartitions(context.Background(), value0, value1, value2, value3, value4))
		fmt.Print("\n")
		break
	case "get_partition_with_auth":
		if flag.NArg()-1 != 5 {
			fmt.Fprintln(os.Stderr, "GetPartitionWithAuth requires 5 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg1225 := flag.Arg(3)
		mbTrans1226 := thrift.NewTMemoryBufferLen(len(arg1225))
		defer mbTrans1226.Close()
		_, err1227 := mbTrans1226.WriteString(arg1225)
		if err1227 != nil {
			Usage()
			return
		}
		factory1228 := thrift.NewTJSONProtocolFactory()
		jsProt1229 := factory1228.GetProtocol(mbTrans1226)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreGetPartitionWithAuthArgs()
		err1230 := containerStruct2.ReadField3(context.Background(), jsProt1229)
		if err1230 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.PartVals
		value2 := argvalue2
		argvalue3 := flag.Arg(4)
		value3 := argvalue3
		arg1232 := flag.Arg(5)
		mbTrans1233 := thrift.NewTMemoryBufferLen(len(arg1232))
		defer mbTrans1233.Close()
		_, err1234 := mbTrans1233.WriteString(arg1232)
		if err1234 != nil {
			Usage()
			return
		}
		factory1235 := thrift.NewTJSONProtocolFactory()
		jsProt1236 := factory1235.GetProtocol(mbTrans1233)
		containerStruct4 := hive_metastore.NewThriftHiveMetastoreGetPartitionWithAuthArgs()
		err1237 := containerStruct4.ReadField5(context.Background(), jsProt1236)
		if err1237 != nil {
			Usage()
			return
		}
		argvalue4 := containerStruct4.GroupNames
		value4 := argvalue4
		fmt.Print(client.GetPartitionWithAuth(context.Background(), value0, value1, value2, value3, value4))
		fmt.Print("\n")
		break
	case "get_partition_by_name":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetPartitionByName requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.GetPartitionByName(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "get_partitions":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetPartitions requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		tmp2, err1243 := (strconv.Atoi(flag.Arg(3)))
		if err1243 != nil {
			Usage()
			return
		}
		argvalue2 := int16(tmp2)
		value2 := argvalue2
		fmt.Print(client.GetPartitions(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "get_partitions_with_auth":
		if flag.NArg()-1 != 5 {
			fmt.Fprintln(os.Stderr, "GetPartitionsWithAuth requires 5 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		tmp2, err1246 := (strconv.Atoi(flag.Arg(3)))
		if err1246 != nil {
			Usage()
			return
		}
		argvalue2 := int16(tmp2)
		value2 := argvalue2
		argvalue3 := flag.Arg(4)
		value3 := argvalue3
		arg1248 := flag.Arg(5)
		mbTrans1249 := thrift.NewTMemoryBufferLen(len(arg1248))
		defer mbTrans1249.Close()
		_, err1250 := mbTrans1249.WriteString(arg1248)
		if err1250 != nil {
			Usage()
			return
		}
		factory1251 := thrift.NewTJSONProtocolFactory()
		jsProt1252 := factory1251.GetProtocol(mbTrans1249)
		containerStruct4 := hive_metastore.NewThriftHiveMetastoreGetPartitionsWithAuthArgs()
		err1253 := containerStruct4.ReadField5(context.Background(), jsProt1252)
		if err1253 != nil {
			Usage()
			return
		}
		argvalue4 := containerStruct4.GroupNames
		value4 := argvalue4
		fmt.Print(client.GetPartitionsWithAuth(context.Background(), value0, value1, value2, value3, value4))
		fmt.Print("\n")
		break
	case "get_partitions_pspec":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetPartitionsPspec requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		tmp2, err1256 := (strconv.Atoi(flag.Arg(3)))
		if err1256 != nil {
			Usage()
			return
		}
		argvalue2 := int32(tmp2)
		value2 := argvalue2
		fmt.Print(client.GetPartitionsPspec(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "get_partition_names":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetPartitionNames requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		tmp2, err1259 := (strconv.Atoi(flag.Arg(3)))
		if err1259 != nil {
			Usage()
			return
		}
		argvalue2 := int16(tmp2)
		value2 := argvalue2
		fmt.Print(client.GetPartitionNames(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "get_partition_values":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetPartitionValues requires 1 args")
			flag.Usage()
		}
		arg1260 := flag.Arg(1)
		mbTrans1261 := thrift.NewTMemoryBufferLen(len(arg1260))
		defer mbTrans1261.Close()
		_, err1262 := mbTrans1261.WriteString(arg1260)
		if err1262 != nil {
			Usage()
			return
		}
		factory1263 := thrift.NewTJSONProtocolFactory()
		jsProt1264 := factory1263.GetProtocol(mbTrans1261)
		argvalue0 := hive_metastore.NewPartitionValuesRequest()
		err1265 := argvalue0.Read(context.Background(), jsProt1264)
		if err1265 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetPartitionValues(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_partitions_ps":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "GetPartitionsPs requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg1268 := flag.Arg(3)
		mbTrans1269 := thrift.NewTMemoryBufferLen(len(arg1268))
		defer mbTrans1269.Close()
		_, err1270 := mbTrans1269.WriteString(arg1268)
		if err1270 != nil {
			Usage()
			return
		}
		factory1271 := thrift.NewTJSONProtocolFactory()
		jsProt1272 := factory1271.GetProtocol(mbTrans1269)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreGetPartitionsPsArgs()
		err1273 := containerStruct2.ReadField3(context.Background(), jsProt1272)
		if err1273 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.PartVals
		value2 := argvalue2
		tmp3, err1274 := (strconv.Atoi(flag.Arg(4)))
		if err1274 != nil {
			Usage()
			return
		}
		argvalue3 := int16(tmp3)
		value3 := argvalue3
		fmt.Print(client.GetPartitionsPs(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "get_partitions_ps_with_auth":
		if flag.NArg()-1 != 6 {
			fmt.Fprintln(os.Stderr, "GetPartitionsPsWithAuth requires 6 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg1277 := flag.Arg(3)
		mbTrans1278 := thrift.NewTMemoryBufferLen(len(arg1277))
		defer mbTrans1278.Close()
		_, err1279 := mbTrans1278.WriteString(arg1277)
		if err1279 != nil {
			Usage()
			return
		}
		factory1280 := thrift.NewTJSONProtocolFactory()
		jsProt1281 := factory1280.GetProtocol(mbTrans1278)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreGetPartitionsPsWithAuthArgs()
		err1282 := containerStruct2.ReadField3(context.Background(), jsProt1281)
		if err1282 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.PartVals
		value2 := argvalue2
		tmp3, err1283 := (strconv.Atoi(flag.Arg(4)))
		if err1283 != nil {
			Usage()
			return
		}
		argvalue3 := int16(tmp3)
		value3 := argvalue3
		argvalue4 := flag.Arg(5)
		value4 := argvalue4
		arg1285 := flag.Arg(6)
		mbTrans1286 := thrift.NewTMemoryBufferLen(len(arg1285))
		defer mbTrans1286.Close()
		_, err1287 := mbTrans1286.WriteString(arg1285)
		if err1287 != nil {
			Usage()
			return
		}
		factory1288 := thrift.NewTJSONProtocolFactory()
		jsProt1289 := factory1288.GetProtocol(mbTrans1286)
		containerStruct5 := hive_metastore.NewThriftHiveMetastoreGetPartitionsPsWithAuthArgs()
		err1290 := containerStruct5.ReadField6(context.Background(), jsProt1289)
		if err1290 != nil {
			Usage()
			return
		}
		argvalue5 := containerStruct5.GroupNames
		value5 := argvalue5
		fmt.Print(client.GetPartitionsPsWithAuth(context.Background(), value0, value1, value2, value3, value4, value5))
		fmt.Print("\n")
		break
	case "get_partition_names_ps":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "GetPartitionNamesPs requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg1293 := flag.Arg(3)
		mbTrans1294 := thrift.NewTMemoryBufferLen(len(arg1293))
		defer mbTrans1294.Close()
		_, err1295 := mbTrans1294.WriteString(arg1293)
		if err1295 != nil {
			Usage()
			return
		}
		factory1296 := thrift.NewTJSONProtocolFactory()
		jsProt1297 := factory1296.GetProtocol(mbTrans1294)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreGetPartitionNamesPsArgs()
		err1298 := containerStruct2.ReadField3(context.Background(), jsProt1297)
		if err1298 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.PartVals
		value2 := argvalue2
		tmp3, err1299 := (strconv.Atoi(flag.Arg(4)))
		if err1299 != nil {
			Usage()
			return
		}
		argvalue3 := int16(tmp3)
		value3 := argvalue3
		fmt.Print(client.GetPartitionNamesPs(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "get_partitions_by_filter":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "GetPartitionsByFilter requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		tmp3, err1303 := (strconv.Atoi(flag.Arg(4)))
		if err1303 != nil {
			Usage()
			return
		}
		argvalue3 := int16(tmp3)
		value3 := argvalue3
		fmt.Print(client.GetPartitionsByFilter(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "get_part_specs_by_filter":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "GetPartSpecsByFilter requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		tmp3, err1307 := (strconv.Atoi(flag.Arg(4)))
		if err1307 != nil {
			Usage()
			return
		}
		argvalue3 := int32(tmp3)
		value3 := argvalue3
		fmt.Print(client.GetPartSpecsByFilter(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "get_partitions_by_expr":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetPartitionsByExpr requires 1 args")
			flag.Usage()
		}
		arg1308 := flag.Arg(1)
		mbTrans1309 := thrift.NewTMemoryBufferLen(len(arg1308))
		defer mbTrans1309.Close()
		_, err1310 := mbTrans1309.WriteString(arg1308)
		if err1310 != nil {
			Usage()
			return
		}
		factory1311 := thrift.NewTJSONProtocolFactory()
		jsProt1312 := factory1311.GetProtocol(mbTrans1309)
		argvalue0 := hive_metastore.NewPartitionsByExprRequest()
		err1313 := argvalue0.Read(context.Background(), jsProt1312)
		if err1313 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetPartitionsByExpr(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_num_partitions_by_filter":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetNumPartitionsByFilter requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.GetNumPartitionsByFilter(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "get_partitions_by_names":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetPartitionsByNames requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg1319 := flag.Arg(3)
		mbTrans1320 := thrift.NewTMemoryBufferLen(len(arg1319))
		defer mbTrans1320.Close()
		_, err1321 := mbTrans1320.WriteString(arg1319)
		if err1321 != nil {
			Usage()
			return
		}
		factory1322 := thrift.NewTJSONProtocolFactory()
		jsProt1323 := factory1322.GetProtocol(mbTrans1320)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreGetPartitionsByNamesArgs()
		err1324 := containerStruct2.ReadField3(context.Background(), jsProt1323)
		if err1324 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.Names
		value2 := argvalue2
		fmt.Print(client.GetPartitionsByNames(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "alter_partition":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "AlterPartition requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg1327 := flag.Arg(3)
		mbTrans1328 := thrift.NewTMemoryBufferLen(len(arg1327))
		defer mbTrans1328.Close()
		_, err1329 := mbTrans1328.WriteString(arg1327)
		if err1329 != nil {
			Usage()
			return
		}
		factory1330 := thrift.NewTJSONProtocolFactory()
		jsProt1331 := factory1330.GetProtocol(mbTrans1328)
		argvalue2 := hive_metastore.NewPartition()
		err1332 := argvalue2.Read(context.Background(), jsProt1331)
		if err1332 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		fmt.Print(client.AlterPartition(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "alter_partitions":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "AlterPartitions requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg1335 := flag.Arg(3)
		mbTrans1336 := thrift.NewTMemoryBufferLen(len(arg1335))
		defer mbTrans1336.Close()
		_, err1337 := mbTrans1336.WriteString(arg1335)
		if err1337 != nil {
			Usage()
			return
		}
		factory1338 := thrift.NewTJSONProtocolFactory()
		jsProt1339 := factory1338.GetProtocol(mbTrans1336)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreAlterPartitionsArgs()
		err1340 := containerStruct2.ReadField3(context.Background(), jsProt1339)
		if err1340 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.NewParts_
		value2 := argvalue2
		fmt.Print(client.AlterPartitions(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "alter_partitions_with_environment_context":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "AlterPartitionsWithEnvironmentContext requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg1343 := flag.Arg(3)
		mbTrans1344 := thrift.NewTMemoryBufferLen(len(arg1343))
		defer mbTrans1344.Close()
		_, err1345 := mbTrans1344.WriteString(arg1343)
		if err1345 != nil {
			Usage()
			return
		}
		factory1346 := thrift.NewTJSONProtocolFactory()
		jsProt1347 := factory1346.GetProtocol(mbTrans1344)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreAlterPartitionsWithEnvironmentContextArgs()
		err1348 := containerStruct2.ReadField3(context.Background(), jsProt1347)
		if err1348 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.NewParts_
		value2 := argvalue2
		arg1349 := flag.Arg(4)
		mbTrans1350 := thrift.NewTMemoryBufferLen(len(arg1349))
		defer mbTrans1350.Close()
		_, err1351 := mbTrans1350.WriteString(arg1349)
		if err1351 != nil {
			Usage()
			return
		}
		factory1352 := thrift.NewTJSONProtocolFactory()
		jsProt1353 := factory1352.GetProtocol(mbTrans1350)
		argvalue3 := hive_metastore.NewEnvironmentContext()
		err1354 := argvalue3.Read(context.Background(), jsProt1353)
		if err1354 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		fmt.Print(client.AlterPartitionsWithEnvironmentContext(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "alter_partition_with_environment_context":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "AlterPartitionWithEnvironmentContext requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg1357 := flag.Arg(3)
		mbTrans1358 := thrift.NewTMemoryBufferLen(len(arg1357))
		defer mbTrans1358.Close()
		_, err1359 := mbTrans1358.WriteString(arg1357)
		if err1359 != nil {
			Usage()
			return
		}
		factory1360 := thrift.NewTJSONProtocolFactory()
		jsProt1361 := factory1360.GetProtocol(mbTrans1358)
		argvalue2 := hive_metastore.NewPartition()
		err1362 := argvalue2.Read(context.Background(), jsProt1361)
		if err1362 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		arg1363 := flag.Arg(4)
		mbTrans1364 := thrift.NewTMemoryBufferLen(len(arg1363))
		defer mbTrans1364.Close()
		_, err1365 := mbTrans1364.WriteString(arg1363)
		if err1365 != nil {
			Usage()
			return
		}
		factory1366 := thrift.NewTJSONProtocolFactory()
		jsProt1367 := factory1366.GetProtocol(mbTrans1364)
		argvalue3 := hive_metastore.NewEnvironmentContext()
		err1368 := argvalue3.Read(context.Background(), jsProt1367)
		if err1368 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		fmt.Print(client.AlterPartitionWithEnvironmentContext(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "rename_partition":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "RenamePartition requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg1371 := flag.Arg(3)
		mbTrans1372 := thrift.NewTMemoryBufferLen(len(arg1371))
		defer mbTrans1372.Close()
		_, err1373 := mbTrans1372.WriteString(arg1371)
		if err1373 != nil {
			Usage()
			return
		}
		factory1374 := thrift.NewTJSONProtocolFactory()
		jsProt1375 := factory1374.GetProtocol(mbTrans1372)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreRenamePartitionArgs()
		err1376 := containerStruct2.ReadField3(context.Background(), jsProt1375)
		if err1376 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.PartVals
		value2 := argvalue2
		arg1377 := flag.Arg(4)
		mbTrans1378 := thrift.NewTMemoryBufferLen(len(arg1377))
		defer mbTrans1378.Close()
		_, err1379 := mbTrans1378.WriteString(arg1377)
		if err1379 != nil {
			Usage()
			return
		}
		factory1380 := thrift.NewTJSONProtocolFactory()
		jsProt1381 := factory1380.GetProtocol(mbTrans1378)
		argvalue3 := hive_metastore.NewPartition()
		err1382 := argvalue3.Read(context.Background(), jsProt1381)
		if err1382 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		fmt.Print(client.RenamePartition(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "partition_name_has_valid_characters":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "PartitionNameHasValidCharacters requires 2 args")
			flag.Usage()
		}
		arg1383 := flag.Arg(1)
		mbTrans1384 := thrift.NewTMemoryBufferLen(len(arg1383))
		defer mbTrans1384.Close()
		_, err1385 := mbTrans1384.WriteString(arg1383)
		if err1385 != nil {
			Usage()
			return
		}
		factory1386 := thrift.NewTJSONProtocolFactory()
		jsProt1387 := factory1386.GetProtocol(mbTrans1384)
		containerStruct0 := hive_metastore.NewThriftHiveMetastorePartitionNameHasValidCharactersArgs()
		err1388 := containerStruct0.ReadField1(context.Background(), jsProt1387)
		if err1388 != nil {
			Usage()
			return
		}
		argvalue0 := containerStruct0.PartVals
		value0 := argvalue0
		argvalue1 := flag.Arg(2) == "true"
		value1 := argvalue1
		fmt.Print(client.PartitionNameHasValidCharacters(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "get_config_value":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetConfigValue requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.GetConfigValue(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "partition_name_to_vals":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "PartitionNameToVals requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.PartitionNameToVals(context.Background(), value0))
		fmt.Print("\n")
		break
	case "partition_name_to_spec":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "PartitionNameToSpec requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.PartitionNameToSpec(context.Background(), value0))
		fmt.Print("\n")
		break
	case "markPartitionForEvent":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "MarkPartitionForEvent requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg1396 := flag.Arg(3)
		mbTrans1397 := thrift.NewTMemoryBufferLen(len(arg1396))
		defer mbTrans1397.Close()
		_, err1398 := mbTrans1397.WriteString(arg1396)
		if err1398 != nil {
			Usage()
			return
		}
		factory1399 := thrift.NewTJSONProtocolFactory()
		jsProt1400 := factory1399.GetProtocol(mbTrans1397)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreMarkPartitionForEventArgs()
		err1401 := containerStruct2.ReadField3(context.Background(), jsProt1400)
		if err1401 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.PartVals
		value2 := argvalue2
		tmp3, err := (strconv.Atoi(flag.Arg(4)))
		if err != nil {
			Usage()
			return
		}
		argvalue3 := hive_metastore.PartitionEventType(tmp3)
		value3 := argvalue3
		fmt.Print(client.MarkPartitionForEvent(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "isPartitionMarkedForEvent":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "IsPartitionMarkedForEvent requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg1404 := flag.Arg(3)
		mbTrans1405 := thrift.NewTMemoryBufferLen(len(arg1404))
		defer mbTrans1405.Close()
		_, err1406 := mbTrans1405.WriteString(arg1404)
		if err1406 != nil {
			Usage()
			return
		}
		factory1407 := thrift.NewTJSONProtocolFactory()
		jsProt1408 := factory1407.GetProtocol(mbTrans1405)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreIsPartitionMarkedForEventArgs()
		err1409 := containerStruct2.ReadField3(context.Background(), jsProt1408)
		if err1409 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.PartVals
		value2 := argvalue2
		tmp3, err := (strconv.Atoi(flag.Arg(4)))
		if err != nil {
			Usage()
			return
		}
		argvalue3 := hive_metastore.PartitionEventType(tmp3)
		value3 := argvalue3
		fmt.Print(client.IsPartitionMarkedForEvent(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "add_index":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "AddIndex requires 2 args")
			flag.Usage()
		}
		arg1410 := flag.Arg(1)
		mbTrans1411 := thrift.NewTMemoryBufferLen(len(arg1410))
		defer mbTrans1411.Close()
		_, err1412 := mbTrans1411.WriteString(arg1410)
		if err1412 != nil {
			Usage()
			return
		}
		factory1413 := thrift.NewTJSONProtocolFactory()
		jsProt1414 := factory1413.GetProtocol(mbTrans1411)
		argvalue0 := hive_metastore.NewIndex()
		err1415 := argvalue0.Read(context.Background(), jsProt1414)
		if err1415 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		arg1416 := flag.Arg(2)
		mbTrans1417 := thrift.NewTMemoryBufferLen(len(arg1416))
		defer mbTrans1417.Close()
		_, err1418 := mbTrans1417.WriteString(arg1416)
		if err1418 != nil {
			Usage()
			return
		}
		factory1419 := thrift.NewTJSONProtocolFactory()
		jsProt1420 := factory1419.GetProtocol(mbTrans1417)
		argvalue1 := hive_metastore.NewTable()
		err1421 := argvalue1.Read(context.Background(), jsProt1420)
		if err1421 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.AddIndex(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "alter_index":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "AlterIndex requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		arg1425 := flag.Arg(4)
		mbTrans1426 := thrift.NewTMemoryBufferLen(len(arg1425))
		defer mbTrans1426.Close()
		_, err1427 := mbTrans1426.WriteString(arg1425)
		if err1427 != nil {
			Usage()
			return
		}
		factory1428 := thrift.NewTJSONProtocolFactory()
		jsProt1429 := factory1428.GetProtocol(mbTrans1426)
		argvalue3 := hive_metastore.NewIndex()
		err1430 := argvalue3.Read(context.Background(), jsProt1429)
		if err1430 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		fmt.Print(client.AlterIndex(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "drop_index_by_name":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "DropIndexByName requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		argvalue3 := flag.Arg(4) == "true"
		value3 := argvalue3
		fmt.Print(client.DropIndexByName(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "get_index_by_name":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetIndexByName requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.GetIndexByName(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "get_indexes":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetIndexes requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		tmp2, err1440 := (strconv.Atoi(flag.Arg(3)))
		if err1440 != nil {
			Usage()
			return
		}
		argvalue2 := int16(tmp2)
		value2 := argvalue2
		fmt.Print(client.GetIndexes(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "get_index_names":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetIndexNames requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		tmp2, err1443 := (strconv.Atoi(flag.Arg(3)))
		if err1443 != nil {
			Usage()
			return
		}
		argvalue2 := int16(tmp2)
		value2 := argvalue2
		fmt.Print(client.GetIndexNames(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "get_primary_keys":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetPrimaryKeys requires 1 args")
			flag.Usage()
		}
		arg1444 := flag.Arg(1)
		mbTrans1445 := thrift.NewTMemoryBufferLen(len(arg1444))
		defer mbTrans1445.Close()
		_, err1446 := mbTrans1445.WriteString(arg1444)
		if err1446 != nil {
			Usage()
			return
		}
		factory1447 := thrift.NewTJSONProtocolFactory()
		jsProt1448 := factory1447.GetProtocol(mbTrans1445)
		argvalue0 := hive_metastore.NewPrimaryKeysRequest()
		err1449 := argvalue0.Read(context.Background(), jsProt1448)
		if err1449 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetPrimaryKeys(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_foreign_keys":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetForeignKeys requires 1 args")
			flag.Usage()
		}
		arg1450 := flag.Arg(1)
		mbTrans1451 := thrift.NewTMemoryBufferLen(len(arg1450))
		defer mbTrans1451.Close()
		_, err1452 := mbTrans1451.WriteString(arg1450)
		if err1452 != nil {
			Usage()
			return
		}
		factory1453 := thrift.NewTJSONProtocolFactory()
		jsProt1454 := factory1453.GetProtocol(mbTrans1451)
		argvalue0 := hive_metastore.NewForeignKeysRequest()
		err1455 := argvalue0.Read(context.Background(), jsProt1454)
		if err1455 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetForeignKeys(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_unique_constraints":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetUniqueConstraints requires 1 args")
			flag.Usage()
		}
		arg1456 := flag.Arg(1)
		mbTrans1457 := thrift.NewTMemoryBufferLen(len(arg1456))
		defer mbTrans1457.Close()
		_, err1458 := mbTrans1457.WriteString(arg1456)
		if err1458 != nil {
			Usage()
			return
		}
		factory1459 := thrift.NewTJSONProtocolFactory()
		jsProt1460 := factory1459.GetProtocol(mbTrans1457)
		argvalue0 := hive_metastore.NewUniqueConstraintsRequest()
		err1461 := argvalue0.Read(context.Background(), jsProt1460)
		if err1461 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetUniqueConstraints(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_not_null_constraints":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetNotNullConstraints requires 1 args")
			flag.Usage()
		}
		arg1462 := flag.Arg(1)
		mbTrans1463 := thrift.NewTMemoryBufferLen(len(arg1462))
		defer mbTrans1463.Close()
		_, err1464 := mbTrans1463.WriteString(arg1462)
		if err1464 != nil {
			Usage()
			return
		}
		factory1465 := thrift.NewTJSONProtocolFactory()
		jsProt1466 := factory1465.GetProtocol(mbTrans1463)
		argvalue0 := hive_metastore.NewNotNullConstraintsRequest()
		err1467 := argvalue0.Read(context.Background(), jsProt1466)
		if err1467 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetNotNullConstraints(context.Background(), value0))
		fmt.Print("\n")
		break
	case "update_table_column_statistics":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "UpdateTableColumnStatistics requires 1 args")
			flag.Usage()
		}
		arg1468 := flag.Arg(1)
		mbTrans1469 := thrift.NewTMemoryBufferLen(len(arg1468))
		defer mbTrans1469.Close()
		_, err1470 := mbTrans1469.WriteString(arg1468)
		if err1470 != nil {
			Usage()
			return
		}
		factory1471 := thrift.NewTJSONProtocolFactory()
		jsProt1472 := factory1471.GetProtocol(mbTrans1469)
		argvalue0 := hive_metastore.NewColumnStatistics()
		err1473 := argvalue0.Read(context.Background(), jsProt1472)
		if err1473 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.UpdateTableColumnStatistics(context.Background(), value0))
		fmt.Print("\n")
		break
	case "update_partition_column_statistics":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "UpdatePartitionColumnStatistics requires 1 args")
			flag.Usage()
		}
		arg1474 := flag.Arg(1)
		mbTrans1475 := thrift.NewTMemoryBufferLen(len(arg1474))
		defer mbTrans1475.Close()
		_, err1476 := mbTrans1475.WriteString(arg1474)
		if err1476 != nil {
			Usage()
			return
		}
		factory1477 := thrift.NewTJSONProtocolFactory()
		jsProt1478 := factory1477.GetProtocol(mbTrans1475)
		argvalue0 := hive_metastore.NewColumnStatistics()
		err1479 := argvalue0.Read(context.Background(), jsProt1478)
		if err1479 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.UpdatePartitionColumnStatistics(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_table_column_statistics":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetTableColumnStatistics requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.GetTableColumnStatistics(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "get_partition_column_statistics":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "GetPartitionColumnStatistics requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		argvalue3 := flag.Arg(4)
		value3 := argvalue3
		fmt.Print(client.GetPartitionColumnStatistics(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "get_table_statistics_req":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetTableStatisticsReq requires 1 args")
			flag.Usage()
		}
		arg1487 := flag.Arg(1)
		mbTrans1488 := thrift.NewTMemoryBufferLen(len(arg1487))
		defer mbTrans1488.Close()
		_, err1489 := mbTrans1488.WriteString(arg1487)
		if err1489 != nil {
			Usage()
			return
		}
		factory1490 := thrift.NewTJSONProtocolFactory()
		jsProt1491 := factory1490.GetProtocol(mbTrans1488)
		argvalue0 := hive_metastore.NewTableStatsRequest()
		err1492 := argvalue0.Read(context.Background(), jsProt1491)
		if err1492 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetTableStatisticsReq(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_partitions_statistics_req":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetPartitionsStatisticsReq requires 1 args")
			flag.Usage()
		}
		arg1493 := flag.Arg(1)
		mbTrans1494 := thrift.NewTMemoryBufferLen(len(arg1493))
		defer mbTrans1494.Close()
		_, err1495 := mbTrans1494.WriteString(arg1493)
		if err1495 != nil {
			Usage()
			return
		}
		factory1496 := thrift.NewTJSONProtocolFactory()
		jsProt1497 := factory1496.GetProtocol(mbTrans1494)
		argvalue0 := hive_metastore.NewPartitionsStatsRequest()
		err1498 := argvalue0.Read(context.Background(), jsProt1497)
		if err1498 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetPartitionsStatisticsReq(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_aggr_stats_for":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetAggrStatsFor requires 1 args")
			flag.Usage()
		}
		arg1499 := flag.Arg(1)
		mbTrans1500 := thrift.NewTMemoryBufferLen(len(arg1499))
		defer mbTrans1500.Close()
		_, err1501 := mbTrans1500.WriteString(arg1499)
		if err1501 != nil {
			Usage()
			return
		}
		factory1502 := thrift.NewTJSONProtocolFactory()
		jsProt1503 := factory1502.GetProtocol(mbTrans1500)
		argvalue0 := hive_metastore.NewPartitionsStatsRequest()
		err1504 := argvalue0.Read(context.Background(), jsProt1503)
		if err1504 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetAggrStatsFor(context.Background(), value0))
		fmt.Print("\n")
		break
	case "set_aggr_stats_for":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "SetAggrStatsFor requires 1 args")
			flag.Usage()
		}
		arg1505 := flag.Arg(1)
		mbTrans1506 := thrift.NewTMemoryBufferLen(len(arg1505))
		defer mbTrans1506.Close()
		_, err1507 := mbTrans1506.WriteString(arg1505)
		if err1507 != nil {
			Usage()
			return
		}
		factory1508 := thrift.NewTJSONProtocolFactory()
		jsProt1509 := factory1508.GetProtocol(mbTrans1506)
		argvalue0 := hive_metastore.NewSetPartitionsStatsRequest()
		err1510 := argvalue0.Read(context.Background(), jsProt1509)
		if err1510 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.SetAggrStatsFor(context.Background(), value0))
		fmt.Print("\n")
		break
	case "delete_partition_column_statistics":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "DeletePartitionColumnStatistics requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		argvalue3 := flag.Arg(4)
		value3 := argvalue3
		fmt.Print(client.DeletePartitionColumnStatistics(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "delete_table_column_statistics":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "DeleteTableColumnStatistics requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.DeleteTableColumnStatistics(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "create_function":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CreateFunction requires 1 args")
			flag.Usage()
		}
		arg1518 := flag.Arg(1)
		mbTrans1519 := thrift.NewTMemoryBufferLen(len(arg1518))
		defer mbTrans1519.Close()
		_, err1520 := mbTrans1519.WriteString(arg1518)
		if err1520 != nil {
			Usage()
			return
		}
		factory1521 := thrift.NewTJSONProtocolFactory()
		jsProt1522 := factory1521.GetProtocol(mbTrans1519)
		argvalue0 := hive_metastore.NewFunction()
		err1523 := argvalue0.Read(context.Background(), jsProt1522)
		if err1523 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.CreateFunction(context.Background(), value0))
		fmt.Print("\n")
		break
	case "drop_function":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "DropFunction requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.DropFunction(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "alter_function":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "AlterFunction requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg1528 := flag.Arg(3)
		mbTrans1529 := thrift.NewTMemoryBufferLen(len(arg1528))
		defer mbTrans1529.Close()
		_, err1530 := mbTrans1529.WriteString(arg1528)
		if err1530 != nil {
			Usage()
			return
		}
		factory1531 := thrift.NewTJSONProtocolFactory()
		jsProt1532 := factory1531.GetProtocol(mbTrans1529)
		argvalue2 := hive_metastore.NewFunction()
		err1533 := argvalue2.Read(context.Background(), jsProt1532)
		if err1533 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		fmt.Print(client.AlterFunction(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "get_functions":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetFunctions requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.GetFunctions(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "get_function":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetFunction requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.GetFunction(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "get_all_functions":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetAllFunctions requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetAllFunctions(context.Background()))
		fmt.Print("\n")
		break
	case "create_role":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CreateRole requires 1 args")
			flag.Usage()
		}
		arg1538 := flag.Arg(1)
		mbTrans1539 := thrift.NewTMemoryBufferLen(len(arg1538))
		defer mbTrans1539.Close()
		_, err1540 := mbTrans1539.WriteString(arg1538)
		if err1540 != nil {
			Usage()
			return
		}
		factory1541 := thrift.NewTJSONProtocolFactory()
		jsProt1542 := factory1541.GetProtocol(mbTrans1539)
		argvalue0 := hive_metastore.NewRole()
		err1543 := argvalue0.Read(context.Background(), jsProt1542)
		if err1543 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.CreateRole(context.Background(), value0))
		fmt.Print("\n")
		break
	case "drop_role":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DropRole requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.DropRole(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_role_names":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetRoleNames requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetRoleNames(context.Background()))
		fmt.Print("\n")
		break
	case "grant_role":
		if flag.NArg()-1 != 6 {
			fmt.Fprintln(os.Stderr, "GrantRole requires 6 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		tmp2, err := (strconv.Atoi(flag.Arg(3)))
		if err != nil {
			Usage()
			return
		}
		argvalue2 := hive_metastore.PrincipalType(tmp2)
		value2 := argvalue2
		argvalue3 := flag.Arg(4)
		value3 := argvalue3
		tmp4, err := (strconv.Atoi(flag.Arg(5)))
		if err != nil {
			Usage()
			return
		}
		argvalue4 := hive_metastore.PrincipalType(tmp4)
		value4 := argvalue4
		argvalue5 := flag.Arg(6) == "true"
		value5 := argvalue5
		fmt.Print(client.GrantRole(context.Background(), value0, value1, value2, value3, value4, value5))
		fmt.Print("\n")
		break
	case "revoke_role":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "RevokeRole requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		tmp2, err := (strconv.Atoi(flag.Arg(3)))
		if err != nil {
			Usage()
			return
		}
		argvalue2 := hive_metastore.PrincipalType(tmp2)
		value2 := argvalue2
		fmt.Print(client.RevokeRole(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "list_roles":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "ListRoles requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		tmp1, err := (strconv.Atoi(flag.Arg(2)))
		if err != nil {
			Usage()
			return
		}
		argvalue1 := hive_metastore.PrincipalType(tmp1)
		value1 := argvalue1
		fmt.Print(client.ListRoles(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "grant_revoke_role":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GrantRevokeRole requires 1 args")
			flag.Usage()
		}
		arg1552 := flag.Arg(1)
		mbTrans1553 := thrift.NewTMemoryBufferLen(len(arg1552))
		defer mbTrans1553.Close()
		_, err1554 := mbTrans1553.WriteString(arg1552)
		if err1554 != nil {
			Usage()
			return
		}
		factory1555 := thrift.NewTJSONProtocolFactory()
		jsProt1556 := factory1555.GetProtocol(mbTrans1553)
		argvalue0 := hive_metastore.NewGrantRevokeRoleRequest()
		err1557 := argvalue0.Read(context.Background(), jsProt1556)
		if err1557 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GrantRevokeRole(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_principals_in_role":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetPrincipalsInRole requires 1 args")
			flag.Usage()
		}
		arg1558 := flag.Arg(1)
		mbTrans1559 := thrift.NewTMemoryBufferLen(len(arg1558))
		defer mbTrans1559.Close()
		_, err1560 := mbTrans1559.WriteString(arg1558)
		if err1560 != nil {
			Usage()
			return
		}
		factory1561 := thrift.NewTJSONProtocolFactory()
		jsProt1562 := factory1561.GetProtocol(mbTrans1559)
		argvalue0 := hive_metastore.NewGetPrincipalsInRoleRequest()
		err1563 := argvalue0.Read(context.Background(), jsProt1562)
		if err1563 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetPrincipalsInRole(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_role_grants_for_principal":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetRoleGrantsForPrincipal requires 1 args")
			flag.Usage()
		}
		arg1564 := flag.Arg(1)
		mbTrans1565 := thrift.NewTMemoryBufferLen(len(arg1564))
		defer mbTrans1565.Close()
		_, err1566 := mbTrans1565.WriteString(arg1564)
		if err1566 != nil {
			Usage()
			return
		}
		factory1567 := thrift.NewTJSONProtocolFactory()
		jsProt1568 := factory1567.GetProtocol(mbTrans1565)
		argvalue0 := hive_metastore.NewGetRoleGrantsForPrincipalRequest()
		err1569 := argvalue0.Read(context.Background(), jsProt1568)
		if err1569 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetRoleGrantsForPrincipal(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_privilege_set":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetPrivilegeSet requires 3 args")
			flag.Usage()
		}
		arg1570 := flag.Arg(1)
		mbTrans1571 := thrift.NewTMemoryBufferLen(len(arg1570))
		defer mbTrans1571.Close()
		_, err1572 := mbTrans1571.WriteString(arg1570)
		if err1572 != nil {
			Usage()
			return
		}
		factory1573 := thrift.NewTJSONProtocolFactory()
		jsProt1574 := factory1573.GetProtocol(mbTrans1571)
		argvalue0 := hive_metastore.NewHiveObjectRef()
		err1575 := argvalue0.Read(context.Background(), jsProt1574)
		if err1575 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg1577 := flag.Arg(3)
		mbTrans1578 := thrift.NewTMemoryBufferLen(len(arg1577))
		defer mbTrans1578.Close()
		_, err1579 := mbTrans1578.WriteString(arg1577)
		if err1579 != nil {
			Usage()
			return
		}
		factory1580 := thrift.NewTJSONProtocolFactory()
		jsProt1581 := factory1580.GetProtocol(mbTrans1578)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreGetPrivilegeSetArgs()
		err1582 := containerStruct2.ReadField3(context.Background(), jsProt1581)
		if err1582 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.GroupNames
		value2 := argvalue2
		fmt.Print(client.GetPrivilegeSet(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "list_privileges":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "ListPrivileges requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		tmp1, err := (strconv.Atoi(flag.Arg(2)))
		if err != nil {
			Usage()
			return
		}
		argvalue1 := hive_metastore.PrincipalType(tmp1)
		value1 := argvalue1
		arg1584 := flag.Arg(3)
		mbTrans1585 := thrift.NewTMemoryBufferLen(len(arg1584))
		defer mbTrans1585.Close()
		_, err1586 := mbTrans1585.WriteString(arg1584)
		if err1586 != nil {
			Usage()
			return
		}
		factory1587 := thrift.NewTJSONProtocolFactory()
		jsProt1588 := factory1587.GetProtocol(mbTrans1585)
		argvalue2 := hive_metastore.NewHiveObjectRef()
		err1589 := argvalue2.Read(context.Background(), jsProt1588)
		if err1589 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		fmt.Print(client.ListPrivileges(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "grant_privileges":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GrantPrivileges requires 1 args")
			flag.Usage()
		}
		arg1590 := flag.Arg(1)
		mbTrans1591 := thrift.NewTMemoryBufferLen(len(arg1590))
		defer mbTrans1591.Close()
		_, err1592 := mbTrans1591.WriteString(arg1590)
		if err1592 != nil {
			Usage()
			return
		}
		factory1593 := thrift.NewTJSONProtocolFactory()
		jsProt1594 := factory1593.GetProtocol(mbTrans1591)
		argvalue0 := hive_metastore.NewPrivilegeBag()
		err1595 := argvalue0.Read(context.Background(), jsProt1594)
		if err1595 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GrantPrivileges(context.Background(), value0))
		fmt.Print("\n")
		break
	case "revoke_privileges":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "RevokePrivileges requires 1 args")
			flag.Usage()
		}
		arg1596 := flag.Arg(1)
		mbTrans1597 := thrift.NewTMemoryBufferLen(len(arg1596))
		defer mbTrans1597.Close()
		_, err1598 := mbTrans1597.WriteString(arg1596)
		if err1598 != nil {
			Usage()
			return
		}
		factory1599 := thrift.NewTJSONProtocolFactory()
		jsProt1600 := factory1599.GetProtocol(mbTrans1597)
		argvalue0 := hive_metastore.NewPrivilegeBag()
		err1601 := argvalue0.Read(context.Background(), jsProt1600)
		if err1601 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.RevokePrivileges(context.Background(), value0))
		fmt.Print("\n")
		break
	case "grant_revoke_privileges":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GrantRevokePrivileges requires 1 args")
			flag.Usage()
		}
		arg1602 := flag.Arg(1)
		mbTrans1603 := thrift.NewTMemoryBufferLen(len(arg1602))
		defer mbTrans1603.Close()
		_, err1604 := mbTrans1603.WriteString(arg1602)
		if err1604 != nil {
			Usage()
			return
		}
		factory1605 := thrift.NewTJSONProtocolFactory()
		jsProt1606 := factory1605.GetProtocol(mbTrans1603)
		argvalue0 := hive_metastore.NewGrantRevokePrivilegeRequest()
		err1607 := argvalue0.Read(context.Background(), jsProt1606)
		if err1607 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GrantRevokePrivileges(context.Background(), value0))
		fmt.Print("\n")
		break
	case "set_ugi":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "SetUgi requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg1609 := flag.Arg(2)
		mbTrans1610 := thrift.NewTMemoryBufferLen(len(arg1609))
		defer mbTrans1610.Close()
		_, err1611 := mbTrans1610.WriteString(arg1609)
		if err1611 != nil {
			Usage()
			return
		}
		factory1612 := thrift.NewTJSONProtocolFactory()
		jsProt1613 := factory1612.GetProtocol(mbTrans1610)
		containerStruct1 := hive_metastore.NewThriftHiveMetastoreSetUgiArgs()
		err1614 := containerStruct1.ReadField2(context.Background(), jsProt1613)
		if err1614 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.GroupNames
		value1 := argvalue1
		fmt.Print(client.SetUgi(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "get_delegation_token":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetDelegationToken requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.GetDelegationToken(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "renew_delegation_token":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "RenewDelegationToken requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.RenewDelegationToken(context.Background(), value0))
		fmt.Print("\n")
		break
	case "cancel_delegation_token":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CancelDelegationToken requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.CancelDelegationToken(context.Background(), value0))
		fmt.Print("\n")
		break
	case "add_token":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "AddToken requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.AddToken(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "remove_token":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "RemoveToken requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.RemoveToken(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_token":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetToken requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetToken(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_all_token_identifiers":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetAllTokenIdentifiers requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetAllTokenIdentifiers(context.Background()))
		fmt.Print("\n")
		break
	case "add_master_key":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AddMasterKey requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.AddMasterKey(context.Background(), value0))
		fmt.Print("\n")
		break
	case "update_master_key":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "UpdateMasterKey requires 2 args")
			flag.Usage()
		}
		tmp0, err1624 := (strconv.Atoi(flag.Arg(1)))
		if err1624 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.UpdateMasterKey(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "remove_master_key":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "RemoveMasterKey requires 1 args")
			flag.Usage()
		}
		tmp0, err1626 := (strconv.Atoi(flag.Arg(1)))
		if err1626 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		fmt.Print(client.RemoveMasterKey(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_master_keys":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetMasterKeys requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetMasterKeys(context.Background()))
		fmt.Print("\n")
		break
	case "get_open_txns":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetOpenTxns requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetOpenTxns(context.Background()))
		fmt.Print("\n")
		break
	case "get_open_txns_info":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetOpenTxnsInfo requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetOpenTxnsInfo(context.Background()))
		fmt.Print("\n")
		break
	case "open_txns":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "OpenTxns requires 1 args")
			flag.Usage()
		}
		arg1627 := flag.Arg(1)
		mbTrans1628 := thrift.NewTMemoryBufferLen(len(arg1627))
		defer mbTrans1628.Close()
		_, err1629 := mbTrans1628.WriteString(arg1627)
		if err1629 != nil {
			Usage()
			return
		}
		factory1630 := thrift.NewTJSONProtocolFactory()
		jsProt1631 := factory1630.GetProtocol(mbTrans1628)
		argvalue0 := hive_metastore.NewOpenTxnRequest()
		err1632 := argvalue0.Read(context.Background(), jsProt1631)
		if err1632 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.OpenTxns(context.Background(), value0))
		fmt.Print("\n")
		break
	case "abort_txn":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AbortTxn requires 1 args")
			flag.Usage()
		}
		arg1633 := flag.Arg(1)
		mbTrans1634 := thrift.NewTMemoryBufferLen(len(arg1633))
		defer mbTrans1634.Close()
		_, err1635 := mbTrans1634.WriteString(arg1633)
		if err1635 != nil {
			Usage()
			return
		}
		factory1636 := thrift.NewTJSONProtocolFactory()
		jsProt1637 := factory1636.GetProtocol(mbTrans1634)
		argvalue0 := hive_metastore.NewAbortTxnRequest()
		err1638 := argvalue0.Read(context.Background(), jsProt1637)
		if err1638 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.AbortTxn(context.Background(), value0))
		fmt.Print("\n")
		break
	case "abort_txns":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AbortTxns requires 1 args")
			flag.Usage()
		}
		arg1639 := flag.Arg(1)
		mbTrans1640 := thrift.NewTMemoryBufferLen(len(arg1639))
		defer mbTrans1640.Close()
		_, err1641 := mbTrans1640.WriteString(arg1639)
		if err1641 != nil {
			Usage()
			return
		}
		factory1642 := thrift.NewTJSONProtocolFactory()
		jsProt1643 := factory1642.GetProtocol(mbTrans1640)
		argvalue0 := hive_metastore.NewAbortTxnsRequest()
		err1644 := argvalue0.Read(context.Background(), jsProt1643)
		if err1644 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.AbortTxns(context.Background(), value0))
		fmt.Print("\n")
		break
	case "commit_txn":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CommitTxn requires 1 args")
			flag.Usage()
		}
		arg1645 := flag.Arg(1)
		mbTrans1646 := thrift.NewTMemoryBufferLen(len(arg1645))
		defer mbTrans1646.Close()
		_, err1647 := mbTrans1646.WriteString(arg1645)
		if err1647 != nil {
			Usage()
			return
		}
		factory1648 := thrift.NewTJSONProtocolFactory()
		jsProt1649 := factory1648.GetProtocol(mbTrans1646)
		argvalue0 := hive_metastore.NewCommitTxnRequest()
		err1650 := argvalue0.Read(context.Background(), jsProt1649)
		if err1650 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.CommitTxn(context.Background(), value0))
		fmt.Print("\n")
		break
	case "lock":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "Lock requires 1 args")
			flag.Usage()
		}
		arg1651 := flag.Arg(1)
		mbTrans1652 := thrift.NewTMemoryBufferLen(len(arg1651))
		defer mbTrans1652.Close()
		_, err1653 := mbTrans1652.WriteString(arg1651)
		if err1653 != nil {
			Usage()
			return
		}
		factory1654 := thrift.NewTJSONProtocolFactory()
		jsProt1655 := factory1654.GetProtocol(mbTrans1652)
		argvalue0 := hive_metastore.NewLockRequest()
		err1656 := argvalue0.Read(context.Background(), jsProt1655)
		if err1656 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.Lock(context.Background(), value0))
		fmt.Print("\n")
		break
	case "check_lock":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CheckLock requires 1 args")
			flag.Usage()
		}
		arg1657 := flag.Arg(1)
		mbTrans1658 := thrift.NewTMemoryBufferLen(len(arg1657))
		defer mbTrans1658.Close()
		_, err1659 := mbTrans1658.WriteString(arg1657)
		if err1659 != nil {
			Usage()
			return
		}
		factory1660 := thrift.NewTJSONProtocolFactory()
		jsProt1661 := factory1660.GetProtocol(mbTrans1658)
		argvalue0 := hive_metastore.NewCheckLockRequest()
		err1662 := argvalue0.Read(context.Background(), jsProt1661)
		if err1662 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.CheckLock(context.Background(), value0))
		fmt.Print("\n")
		break
	case "unlock":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "Unlock requires 1 args")
			flag.Usage()
		}
		arg1663 := flag.Arg(1)
		mbTrans1664 := thrift.NewTMemoryBufferLen(len(arg1663))
		defer mbTrans1664.Close()
		_, err1665 := mbTrans1664.WriteString(arg1663)
		if err1665 != nil {
			Usage()
			return
		}
		factory1666 := thrift.NewTJSONProtocolFactory()
		jsProt1667 := factory1666.GetProtocol(mbTrans1664)
		argvalue0 := hive_metastore.NewUnlockRequest()
		err1668 := argvalue0.Read(context.Background(), jsProt1667)
		if err1668 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.Unlock(context.Background(), value0))
		fmt.Print("\n")
		break
	case "show_locks":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "ShowLocks requires 1 args")
			flag.Usage()
		}
		arg1669 := flag.Arg(1)
		mbTrans1670 := thrift.NewTMemoryBufferLen(len(arg1669))
		defer mbTrans1670.Close()
		_, err1671 := mbTrans1670.WriteString(arg1669)
		if err1671 != nil {
			Usage()
			return
		}
		factory1672 := thrift.NewTJSONProtocolFactory()
		jsProt1673 := factory1672.GetProtocol(mbTrans1670)
		argvalue0 := hive_metastore.NewShowLocksRequest()
		err1674 := argvalue0.Read(context.Background(), jsProt1673)
		if err1674 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.ShowLocks(context.Background(), value0))
		fmt.Print("\n")
		break
	case "heartbeat":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "Heartbeat requires 1 args")
			flag.Usage()
		}
		arg1675 := flag.Arg(1)
		mbTrans1676 := thrift.NewTMemoryBufferLen(len(arg1675))
		defer mbTrans1676.Close()
		_, err1677 := mbTrans1676.WriteString(arg1675)
		if err1677 != nil {
			Usage()
			return
		}
		factory1678 := thrift.NewTJSONProtocolFactory()
		jsProt1679 := factory1678.GetProtocol(mbTrans1676)
		argvalue0 := hive_metastore.NewHeartbeatRequest()
		err1680 := argvalue0.Read(context.Background(), jsProt1679)
		if err1680 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.Heartbeat(context.Background(), value0))
		fmt.Print("\n")
		break
	case "heartbeat_txn_range":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "HeartbeatTxnRange requires 1 args")
			flag.Usage()
		}
		arg1681 := flag.Arg(1)
		mbTrans1682 := thrift.NewTMemoryBufferLen(len(arg1681))
		defer mbTrans1682.Close()
		_, err1683 := mbTrans1682.WriteString(arg1681)
		if err1683 != nil {
			Usage()
			return
		}
		factory1684 := thrift.NewTJSONProtocolFactory()
		jsProt1685 := factory1684.GetProtocol(mbTrans1682)
		argvalue0 := hive_metastore.NewHeartbeatTxnRangeRequest()
		err1686 := argvalue0.Read(context.Background(), jsProt1685)
		if err1686 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.HeartbeatTxnRange(context.Background(), value0))
		fmt.Print("\n")
		break
	case "compact":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "Compact requires 1 args")
			flag.Usage()
		}
		arg1687 := flag.Arg(1)
		mbTrans1688 := thrift.NewTMemoryBufferLen(len(arg1687))
		defer mbTrans1688.Close()
		_, err1689 := mbTrans1688.WriteString(arg1687)
		if err1689 != nil {
			Usage()
			return
		}
		factory1690 := thrift.NewTJSONProtocolFactory()
		jsProt1691 := factory1690.GetProtocol(mbTrans1688)
		argvalue0 := hive_metastore.NewCompactionRequest()
		err1692 := argvalue0.Read(context.Background(), jsProt1691)
		if err1692 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.Compact(context.Background(), value0))
		fmt.Print("\n")
		break
	case "compact2":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "Compact2 requires 1 args")
			flag.Usage()
		}
		arg1693 := flag.Arg(1)
		mbTrans1694 := thrift.NewTMemoryBufferLen(len(arg1693))
		defer mbTrans1694.Close()
		_, err1695 := mbTrans1694.WriteString(arg1693)
		if err1695 != nil {
			Usage()
			return
		}
		factory1696 := thrift.NewTJSONProtocolFactory()
		jsProt1697 := factory1696.GetProtocol(mbTrans1694)
		argvalue0 := hive_metastore.NewCompactionRequest()
		err1698 := argvalue0.Read(context.Background(), jsProt1697)
		if err1698 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.Compact2(context.Background(), value0))
		fmt.Print("\n")
		break
	case "show_compact":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "ShowCompact requires 1 args")
			flag.Usage()
		}
		arg1699 := flag.Arg(1)
		mbTrans1700 := thrift.NewTMemoryBufferLen(len(arg1699))
		defer mbTrans1700.Close()
		_, err1701 := mbTrans1700.WriteString(arg1699)
		if err1701 != nil {
			Usage()
			return
		}
		factory1702 := thrift.NewTJSONProtocolFactory()
		jsProt1703 := factory1702.GetProtocol(mbTrans1700)
		argvalue0 := hive_metastore.NewShowCompactRequest()
		err1704 := argvalue0.Read(context.Background(), jsProt1703)
		if err1704 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.ShowCompact(context.Background(), value0))
		fmt.Print("\n")
		break
	case "add_dynamic_partitions":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AddDynamicPartitions requires 1 args")
			flag.Usage()
		}
		arg1705 := flag.Arg(1)
		mbTrans1706 := thrift.NewTMemoryBufferLen(len(arg1705))
		defer mbTrans1706.Close()
		_, err1707 := mbTrans1706.WriteString(arg1705)
		if err1707 != nil {
			Usage()
			return
		}
		factory1708 := thrift.NewTJSONProtocolFactory()
		jsProt1709 := factory1708.GetProtocol(mbTrans1706)
		argvalue0 := hive_metastore.NewAddDynamicPartitions()
		err1710 := argvalue0.Read(context.Background(), jsProt1709)
		if err1710 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.AddDynamicPartitions(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_next_notification":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetNextNotification requires 1 args")
			flag.Usage()
		}
		arg1711 := flag.Arg(1)
		mbTrans1712 := thrift.NewTMemoryBufferLen(len(arg1711))
		defer mbTrans1712.Close()
		_, err1713 := mbTrans1712.WriteString(arg1711)
		if err1713 != nil {
			Usage()
			return
		}
		factory1714 := thrift.NewTJSONProtocolFactory()
		jsProt1715 := factory1714.GetProtocol(mbTrans1712)
		argvalue0 := hive_metastore.NewNotificationEventRequest()
		err1716 := argvalue0.Read(context.Background(), jsProt1715)
		if err1716 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetNextNotification(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_current_notificationEventId":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetCurrentNotificationEventId requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetCurrentNotificationEventId(context.Background()))
		fmt.Print("\n")
		break
	case "get_notification_events_count":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetNotificationEventsCount requires 1 args")
			flag.Usage()
		}
		arg1717 := flag.Arg(1)
		mbTrans1718 := thrift.NewTMemoryBufferLen(len(arg1717))
		defer mbTrans1718.Close()
		_, err1719 := mbTrans1718.WriteString(arg1717)
		if err1719 != nil {
			Usage()
			return
		}
		factory1720 := thrift.NewTJSONProtocolFactory()
		jsProt1721 := factory1720.GetProtocol(mbTrans1718)
		argvalue0 := hive_metastore.NewNotificationEventsCountRequest()
		err1722 := argvalue0.Read(context.Background(), jsProt1721)
		if err1722 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetNotificationEventsCount(context.Background(), value0))
		fmt.Print("\n")
		break
	case "fire_listener_event":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "FireListenerEvent requires 1 args")
			flag.Usage()
		}
		arg1723 := flag.Arg(1)
		mbTrans1724 := thrift.NewTMemoryBufferLen(len(arg1723))
		defer mbTrans1724.Close()
		_, err1725 := mbTrans1724.WriteString(arg1723)
		if err1725 != nil {
			Usage()
			return
		}
		factory1726 := thrift.NewTJSONProtocolFactory()
		jsProt1727 := factory1726.GetProtocol(mbTrans1724)
		argvalue0 := hive_metastore.NewFireEventRequest()
		err1728 := argvalue0.Read(context.Background(), jsProt1727)
		if err1728 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.FireListenerEvent(context.Background(), value0))
		fmt.Print("\n")
		break
	case "flushCache":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "FlushCache requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.FlushCache(context.Background()))
		fmt.Print("\n")
		break
	case "cm_recycle":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CmRecycle requires 1 args")
			flag.Usage()
		}
		arg1729 := flag.Arg(1)
		mbTrans1730 := thrift.NewTMemoryBufferLen(len(arg1729))
		defer mbTrans1730.Close()
		_, err1731 := mbTrans1730.WriteString(arg1729)
		if err1731 != nil {
			Usage()
			return
		}
		factory1732 := thrift.NewTJSONProtocolFactory()
		jsProt1733 := factory1732.GetProtocol(mbTrans1730)
		argvalue0 := hive_metastore.NewCmRecycleRequest()
		err1734 := argvalue0.Read(context.Background(), jsProt1733)
		if err1734 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.CmRecycle(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_file_metadata_by_expr":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetFileMetadataByExpr requires 1 args")
			flag.Usage()
		}
		arg1735 := flag.Arg(1)
		mbTrans1736 := thrift.NewTMemoryBufferLen(len(arg1735))
		defer mbTrans1736.Close()
		_, err1737 := mbTrans1736.WriteString(arg1735)
		if err1737 != nil {
			Usage()
			return
		}
		factory1738 := thrift.NewTJSONProtocolFactory()
		jsProt1739 := factory1738.GetProtocol(mbTrans1736)
		argvalue0 := hive_metastore.NewGetFileMetadataByExprRequest()
		err1740 := argvalue0.Read(context.Background(), jsProt1739)
		if err1740 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetFileMetadataByExpr(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_file_metadata":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetFileMetadata requires 1 args")
			flag.Usage()
		}
		arg1741 := flag.Arg(1)
		mbTrans1742 := thrift.NewTMemoryBufferLen(len(arg1741))
		defer mbTrans1742.Close()
		_, err1743 := mbTrans1742.WriteString(arg1741)
		if err1743 != nil {
			Usage()
			return
		}
		factory1744 := thrift.NewTJSONProtocolFactory()
		jsProt1745 := factory1744.GetProtocol(mbTrans1742)
		argvalue0 := hive_metastore.NewGetFileMetadataRequest()
		err1746 := argvalue0.Read(context.Background(), jsProt1745)
		if err1746 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetFileMetadata(context.Background(), value0))
		fmt.Print("\n")
		break
	case "put_file_metadata":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "PutFileMetadata requires 1 args")
			flag.Usage()
		}
		arg1747 := flag.Arg(1)
		mbTrans1748 := thrift.NewTMemoryBufferLen(len(arg1747))
		defer mbTrans1748.Close()
		_, err1749 := mbTrans1748.WriteString(arg1747)
		if err1749 != nil {
			Usage()
			return
		}
		factory1750 := thrift.NewTJSONProtocolFactory()
		jsProt1751 := factory1750.GetProtocol(mbTrans1748)
		argvalue0 := hive_metastore.NewPutFileMetadataRequest()
		err1752 := argvalue0.Read(context.Background(), jsProt1751)
		if err1752 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.PutFileMetadata(context.Background(), value0))
		fmt.Print("\n")
		break
	case "clear_file_metadata":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "ClearFileMetadata requires 1 args")
			flag.Usage()
		}
		arg1753 := flag.Arg(1)
		mbTrans1754 := thrift.NewTMemoryBufferLen(len(arg1753))
		defer mbTrans1754.Close()
		_, err1755 := mbTrans1754.WriteString(arg1753)
		if err1755 != nil {
			Usage()
			return
		}
		factory1756 := thrift.NewTJSONProtocolFactory()
		jsProt1757 := factory1756.GetProtocol(mbTrans1754)
		argvalue0 := hive_metastore.NewClearFileMetadataRequest()
		err1758 := argvalue0.Read(context.Background(), jsProt1757)
		if err1758 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.ClearFileMetadata(context.Background(), value0))
		fmt.Print("\n")
		break
	case "cache_file_metadata":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CacheFileMetadata requires 1 args")
			flag.Usage()
		}
		arg1759 := flag.Arg(1)
		mbTrans1760 := thrift.NewTMemoryBufferLen(len(arg1759))
		defer mbTrans1760.Close()
		_, err1761 := mbTrans1760.WriteString(arg1759)
		if err1761 != nil {
			Usage()
			return
		}
		factory1762 := thrift.NewTJSONProtocolFactory()
		jsProt1763 := factory1762.GetProtocol(mbTrans1760)
		argvalue0 := hive_metastore.NewCacheFileMetadataRequest()
		err1764 := argvalue0.Read(context.Background(), jsProt1763)
		if err1764 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.CacheFileMetadata(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_metastore_db_uuid":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetMetastoreDbUUID requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetMetastoreDbUUID(context.Background()))
		fmt.Print("\n")
		break
	case "create_resource_plan":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CreateResourcePlan requires 1 args")
			flag.Usage()
		}
		arg1765 := flag.Arg(1)
		mbTrans1766 := thrift.NewTMemoryBufferLen(len(arg1765))
		defer mbTrans1766.Close()
		_, err1767 := mbTrans1766.WriteString(arg1765)
		if err1767 != nil {
			Usage()
			return
		}
		factory1768 := thrift.NewTJSONProtocolFactory()
		jsProt1769 := factory1768.GetProtocol(mbTrans1766)
		argvalue0 := hive_metastore.NewWMCreateResourcePlanRequest()
		err1770 := argvalue0.Read(context.Background(), jsProt1769)
		if err1770 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.CreateResourcePlan(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_resource_plan":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetResourcePlan requires 1 args")
			flag.Usage()
		}
		arg1771 := flag.Arg(1)
		mbTrans1772 := thrift.NewTMemoryBufferLen(len(arg1771))
		defer mbTrans1772.Close()
		_, err1773 := mbTrans1772.WriteString(arg1771)
		if err1773 != nil {
			Usage()
			return
		}
		factory1774 := thrift.NewTJSONProtocolFactory()
		jsProt1775 := factory1774.GetProtocol(mbTrans1772)
		argvalue0 := hive_metastore.NewWMGetResourcePlanRequest()
		err1776 := argvalue0.Read(context.Background(), jsProt1775)
		if err1776 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetResourcePlan(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_active_resource_plan":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetActiveResourcePlan requires 1 args")
			flag.Usage()
		}
		arg1777 := flag.Arg(1)
		mbTrans1778 := thrift.NewTMemoryBufferLen(len(arg1777))
		defer mbTrans1778.Close()
		_, err1779 := mbTrans1778.WriteString(arg1777)
		if err1779 != nil {
			Usage()
			return
		}
		factory1780 := thrift.NewTJSONProtocolFactory()
		jsProt1781 := factory1780.GetProtocol(mbTrans1778)
		argvalue0 := hive_metastore.NewWMGetActiveResourcePlanRequest()
		err1782 := argvalue0.Read(context.Background(), jsProt1781)
		if err1782 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetActiveResourcePlan(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_all_resource_plans":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetAllResourcePlans requires 1 args")
			flag.Usage()
		}
		arg1783 := flag.Arg(1)
		mbTrans1784 := thrift.NewTMemoryBufferLen(len(arg1783))
		defer mbTrans1784.Close()
		_, err1785 := mbTrans1784.WriteString(arg1783)
		if err1785 != nil {
			Usage()
			return
		}
		factory1786 := thrift.NewTJSONProtocolFactory()
		jsProt1787 := factory1786.GetProtocol(mbTrans1784)
		argvalue0 := hive_metastore.NewWMGetAllResourcePlanRequest()
		err1788 := argvalue0.Read(context.Background(), jsProt1787)
		if err1788 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetAllResourcePlans(context.Background(), value0))
		fmt.Print("\n")
		break
	case "alter_resource_plan":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AlterResourcePlan requires 1 args")
			flag.Usage()
		}
		arg1789 := flag.Arg(1)
		mbTrans1790 := thrift.NewTMemoryBufferLen(len(arg1789))
		defer mbTrans1790.Close()
		_, err1791 := mbTrans1790.WriteString(arg1789)
		if err1791 != nil {
			Usage()
			return
		}
		factory1792 := thrift.NewTJSONProtocolFactory()
		jsProt1793 := factory1792.GetProtocol(mbTrans1790)
		argvalue0 := hive_metastore.NewWMAlterResourcePlanRequest()
		err1794 := argvalue0.Read(context.Background(), jsProt1793)
		if err1794 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.AlterResourcePlan(context.Background(), value0))
		fmt.Print("\n")
		break
	case "validate_resource_plan":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "ValidateResourcePlan requires 1 args")
			flag.Usage()
		}
		arg1795 := flag.Arg(1)
		mbTrans1796 := thrift.NewTMemoryBufferLen(len(arg1795))
		defer mbTrans1796.Close()
		_, err1797 := mbTrans1796.WriteString(arg1795)
		if err1797 != nil {
			Usage()
			return
		}
		factory1798 := thrift.NewTJSONProtocolFactory()
		jsProt1799 := factory1798.GetProtocol(mbTrans1796)
		argvalue0 := hive_metastore.NewWMValidateResourcePlanRequest()
		err1800 := argvalue0.Read(context.Background(), jsProt1799)
		if err1800 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.ValidateResourcePlan(context.Background(), value0))
		fmt.Print("\n")
		break
	case "drop_resource_plan":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DropResourcePlan requires 1 args")
			flag.Usage()
		}
		arg1801 := flag.Arg(1)
		mbTrans1802 := thrift.NewTMemoryBufferLen(len(arg1801))
		defer mbTrans1802.Close()
		_, err1803 := mbTrans1802.WriteString(arg1801)
		if err1803 != nil {
			Usage()
			return
		}
		factory1804 := thrift.NewTJSONProtocolFactory()
		jsProt1805 := factory1804.GetProtocol(mbTrans1802)
		argvalue0 := hive_metastore.NewWMDropResourcePlanRequest()
		err1806 := argvalue0.Read(context.Background(), jsProt1805)
		if err1806 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.DropResourcePlan(context.Background(), value0))
		fmt.Print("\n")
		break
	case "create_wm_trigger":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CreateWmTrigger requires 1 args")
			flag.Usage()
		}
		arg1807 := flag.Arg(1)
		mbTrans1808 := thrift.NewTMemoryBufferLen(len(arg1807))
		defer mbTrans1808.Close()
		_, err1809 := mbTrans1808.WriteString(arg1807)
		if err1809 != nil {
			Usage()
			return
		}
		factory1810 := thrift.NewTJSONProtocolFactory()
		jsProt1811 := factory1810.GetProtocol(mbTrans1808)
		argvalue0 := hive_metastore.NewWMCreateTriggerRequest()
		err1812 := argvalue0.Read(context.Background(), jsProt1811)
		if err1812 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.CreateWmTrigger(context.Background(), value0))
		fmt.Print("\n")
		break
	case "alter_wm_trigger":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AlterWmTrigger requires 1 args")
			flag.Usage()
		}
		arg1813 := flag.Arg(1)
		mbTrans1814 := thrift.NewTMemoryBufferLen(len(arg1813))
		defer mbTrans1814.Close()
		_, err1815 := mbTrans1814.WriteString(arg1813)
		if err1815 != nil {
			Usage()
			return
		}
		factory1816 := thrift.NewTJSONProtocolFactory()
		jsProt1817 := factory1816.GetProtocol(mbTrans1814)
		argvalue0 := hive_metastore.NewWMAlterTriggerRequest()
		err1818 := argvalue0.Read(context.Background(), jsProt1817)
		if err1818 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.AlterWmTrigger(context.Background(), value0))
		fmt.Print("\n")
		break
	case "drop_wm_trigger":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DropWmTrigger requires 1 args")
			flag.Usage()
		}
		arg1819 := flag.Arg(1)
		mbTrans1820 := thrift.NewTMemoryBufferLen(len(arg1819))
		defer mbTrans1820.Close()
		_, err1821 := mbTrans1820.WriteString(arg1819)
		if err1821 != nil {
			Usage()
			return
		}
		factory1822 := thrift.NewTJSONProtocolFactory()
		jsProt1823 := factory1822.GetProtocol(mbTrans1820)
		argvalue0 := hive_metastore.NewWMDropTriggerRequest()
		err1824 := argvalue0.Read(context.Background(), jsProt1823)
		if err1824 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.DropWmTrigger(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_triggers_for_resourceplan":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetTriggersForResourceplan requires 1 args")
			flag.Usage()
		}
		arg1825 := flag.Arg(1)
		mbTrans1826 := thrift.NewTMemoryBufferLen(len(arg1825))
		defer mbTrans1826.Close()
		_, err1827 := mbTrans1826.WriteString(arg1825)
		if err1827 != nil {
			Usage()
			return
		}
		factory1828 := thrift.NewTJSONProtocolFactory()
		jsProt1829 := factory1828.GetProtocol(mbTrans1826)
		argvalue0 := hive_metastore.NewWMGetTriggersForResourePlanRequest()
		err1830 := argvalue0.Read(context.Background(), jsProt1829)
		if err1830 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetTriggersForResourceplan(context.Background(), value0))
		fmt.Print("\n")
		break
	case "":
		Usage()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
	}
}
